{
    "docs": [
        {
            "location": "/index.html",
            "text": "Welcome to MAAS\u2019s new command-line tool & Python client libraries.\n\n\nFor documentation on the MAAS server components, visit\n\nmaas.ubuntu.com\n.\n\n\nCommand-line\n\n\n$ bin/maas login --help\n$ bin/maas login exmpl http://example.com:5240/MAAS/ my_username\nPassword: \u2026\n$ bin/maas list-nodes --profile-name exmpl\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname      \u2502 System ID \u2502 Architecture  \u2502 #CPUs \u2502 RAM    \u2502 Status    \u2502 Power \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 botswana.maas \u2502 433334    \u2502 amd64/generic \u2502 4     \u2502 8.0 GB \u2502 Ready     \u2502 Off   \u2502\n\u2502 namibia.maas  \u2502 433333    \u2502 amd64/generic \u2502 4     \u2502 8.0 GB \u2502 Allocated \u2502 Off   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\nClient libraries\n\n\nThere are two client libraries that make use of MAAS\u2019s Web API:\n\n\n\n\n\n\nA lower-level library that closely mirrors MAAS\u2019s Web API, referred to\n  as \nbones\n. The MAAS server publishes a description of its Web API and\n  \nbones\n provides a convenient mechanism to interact with it.\n\n\n\n\n\n\nA higher-level library that\u2019s designed for developers, referred to as\n  \nviscera\n. MAAS\u2019s Web API is sometimes unfriendly or inconsistent, but\n  \nviscera\n presents a saner API, designed for developers rather than\n  machines.\n\n\n\n\n\n\nThe implementation of \nviscera\n makes use of\n\nbones\n. \nViscera\n is the API that should be preferred\nfor application development.\n\n\nNext: \nGet started with \nviscera",
            "title": "Home"
        },
        {
            "location": "/index.html#welcome-to-maass-new-command-line-tool-python-client-libraries",
            "text": "For documentation on the MAAS server components, visit maas.ubuntu.com .",
            "title": "Welcome to MAAS's new command-line tool &amp; Python client libraries."
        },
        {
            "location": "/index.html#command-line",
            "text": "$ bin/maas login --help\n$ bin/maas login exmpl http://example.com:5240/MAAS/ my_username\nPassword: \u2026\n$ bin/maas list-nodes --profile-name exmpl\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname      \u2502 System ID \u2502 Architecture  \u2502 #CPUs \u2502 RAM    \u2502 Status    \u2502 Power \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 botswana.maas \u2502 433334    \u2502 amd64/generic \u2502 4     \u2502 8.0 GB \u2502 Ready     \u2502 Off   \u2502\n\u2502 namibia.maas  \u2502 433333    \u2502 amd64/generic \u2502 4     \u2502 8.0 GB \u2502 Allocated \u2502 Off   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
            "title": "Command-line"
        },
        {
            "location": "/index.html#client-libraries",
            "text": "There are two client libraries that make use of MAAS\u2019s Web API:    A lower-level library that closely mirrors MAAS\u2019s Web API, referred to\n  as  bones . The MAAS server publishes a description of its Web API and\n   bones  provides a convenient mechanism to interact with it.    A higher-level library that\u2019s designed for developers, referred to as\n   viscera . MAAS\u2019s Web API is sometimes unfriendly or inconsistent, but\n   viscera  presents a saner API, designed for developers rather than\n  machines.    The implementation of  viscera  makes use of bones .  Viscera  is the API that should be preferred\nfor application development.  Next:  Get started with  viscera",
            "title": "Client libraries"
        },
        {
            "location": "/bones/index.html",
            "text": "Bones\n: Low-level Python client API",
            "title": "Home"
        },
        {
            "location": "/bones/index.html#bones-low-level-python-client-api",
            "text": "",
            "title": "Bones: Low-level Python client API"
        },
        {
            "location": "/viscera/getting-started/index.html",
            "text": "Getting started with \nviscera\n\n\nInstallation\n\n\nEither work from a branch:\n\n\n$ git clone https://github.com/alburnum/alburnum-maas-client.git\n$ cd alburnum-maas-client\n$ make\n\n\n\n\nOr install from \nPyPI\n:\n\n\n$ virtualenv --python=python3.5 maas\n$ cd maas\n$ bin/pip install alburnum-maas-client\n\n\n\n\nLogging-in\n\n\nLog-in using the command-line tool:\n\n\n$ bin/maas login foo http://example.com:5240/MAAS/ admin\nPassword: \u2026\n\n\n\n\nTODO\n: Log-in programmatically.\n\n\nThen start an interactive Python shell, like \nbin/python\n:\n\n\n>>> from alburnum.maas import bones, viscera\n>>> session = bones.SessionAPI.fromProfileName(\"foo\")\n>>> origin = viscera.Origin(session)\n\n\n\n\nThe \norigin\n instance is the root object of the API.\n\n\nBut there\u2019s no need! There\u2019s a command built in to do it for you:\n\n\n$ bin/maas shell\nWelcome to the MAAS shell.\n\nPredefined variables:\n\n    origin: A `viscera` origin, configured for foo.\n   session: A `bones` session, configured for foo.\n\n>>>\n\n\n\n\nLogging out\n\n\nLog-out using the command-line tool:\n\n\n$ bin/maas logout foo\n\n\n\n\nTODO\n: Log-out programmatically.\n\n\nNodes\n\n\nListing nodes:\n\n\n>>> for node in origin.Nodes:\n...     print(repr(node))\n<Node hostname='namibia.maas' system_id='433333'>\n<Node hostname='botswana.maas' system_id='433334'>\n\n\n\n\nAcquiring and starting nodes:\n\n\n>>> help(origin.Nodes.acquire)\nacquire(*, hostname:str=None, architecture:str=None, cpus:int=None,\n        memory:float=None, tags:typing.Sequence=None) method of\n            alburnum.maas.viscera.NodesType instance\n    :param hostname: The hostname to match.\n    :param architecture: The architecture to match, e.g. \"amd64\".\n    :param cpus: The minimum number of CPUs to match.\n    :param memory: The minimum amount of RAM to match.\n    :param tags: The tags to match, as a sequence. Each tag may be\n        prefixed with a hyphen to denote that the given tag should NOT be\n        associated with a matched node.\n>>> node = origin.Nodes.acquire(tags=(\"foo\", \"-bar\"))\n>>> print(node.substatus_name)\nAcquired\n>>> node.start()\n>>> print(node.substatus_name)\nDeploying\n\n\n\n\nIndividual nodes can be read from the Web API.\n\n\n>>> node = origin.Node.read(system_id=\"433333\")\n\n\n\n\nNodes have many useful attributes:\n\n\n>>> node.architecture\n'amd64/generic'\n>>> node.cpus\n4\n\n\n\n\nTrying using tab-completion \u2014 the objects have been designed to be\nparticularly friendly for interactive use \u2014 or \ndir(node)\n to find out\nwhat other fields and methods are available.\n\n\nTODO\n: Updating nodes.\n\n\nFiles, Users, Tags\n\n\nSimilarly to nodes, these sets of objects can be fetched:\n\n\n>>> tags = origin.Tags.read()\n>>> files = origin.Files.read()\n>>> users = origin.Users.read()\n\n\n\n\nWhen reading from collections, as above, the returned object is\nlist-like:\n\n\n>>> len(tags)\n5\n>>> tags[3]\n<Tag comment=\"Foo's stuff\" definition='' kernel_opts='' name='foo'>\n>>> tags[3] in tags\nTrue\n>>> not_foo = [tag for tag in tags if tag.name != 'foo']\n>>> len(not_foo)\n4\n\n\n\n\nHowever, it\u2019s read-only:\n\n\n>>> tags[0] = \"bob\"\n\u2026\nTypeError: 'Tags' object does not support item assignment\n\n\n\n\nEvents\n\n\nEvents are similar\u2026 but different. The only way to get events is by\nthe \nquery\n method:\n\n\n>>> events = origin.Events.query()\n\n\n\n\nThis accepts a plethora of optional arguments to narrow down the results:\n\n\n>>> events = origin.Events.query(hostnames={\"foo\", \"bar\"})\n>>> events = origin.Events.query(domains={\"example.com\", \"maas.io\"})\n>>> events = origin.Events.query(zones=[\"red\", \"blue\"])\n>>> events = origin.Events.query(macs=(\"12:34:56:78:90:ab\", ))\n>>> events = origin.Events.query(system_ids=\u2026)\n>>> events = origin.Events.query(agent_name=\u2026)\n>>> events = origin.Events.query(level=\u2026)\n>>> events = origin.Events.query(after=\u2026, limit=\u2026)\n\n\n\n\nThese arguments can be combined to narrow the results even further.\n\n\nThe \nlevel\n argument is a little special. It\u2019s a choice from a\npredefined set. For convenience, those choices are defined in the\n\nLevel\n enum:\n\n\n>>> events = origin.Events.query(level=origin.Events.Level.ERROR)\n\n\n\n\nbut you can also pass in the string \u201cERROR\u201d or the number 40.",
            "title": "Getting started"
        },
        {
            "location": "/viscera/getting-started/index.html#getting-started-with-viscera",
            "text": "",
            "title": "Getting started with viscera"
        },
        {
            "location": "/viscera/getting-started/index.html#installation",
            "text": "Either work from a branch:  $ git clone https://github.com/alburnum/alburnum-maas-client.git\n$ cd alburnum-maas-client\n$ make  Or install from  PyPI :  $ virtualenv --python=python3.5 maas\n$ cd maas\n$ bin/pip install alburnum-maas-client",
            "title": "Installation"
        },
        {
            "location": "/viscera/getting-started/index.html#logging-in",
            "text": "Log-in using the command-line tool:  $ bin/maas login foo http://example.com:5240/MAAS/ admin\nPassword: \u2026  TODO : Log-in programmatically.  Then start an interactive Python shell, like  bin/python :  >>> from alburnum.maas import bones, viscera\n>>> session = bones.SessionAPI.fromProfileName(\"foo\")\n>>> origin = viscera.Origin(session)  The  origin  instance is the root object of the API.  But there\u2019s no need! There\u2019s a command built in to do it for you:  $ bin/maas shell\nWelcome to the MAAS shell.\n\nPredefined variables:\n\n    origin: A `viscera` origin, configured for foo.\n   session: A `bones` session, configured for foo.\n\n>>>",
            "title": "Logging-in"
        },
        {
            "location": "/viscera/getting-started/index.html#logging-out",
            "text": "Log-out using the command-line tool:  $ bin/maas logout foo  TODO : Log-out programmatically.",
            "title": "Logging out"
        },
        {
            "location": "/viscera/getting-started/index.html#nodes",
            "text": "Listing nodes:  >>> for node in origin.Nodes:\n...     print(repr(node))\n<Node hostname='namibia.maas' system_id='433333'>\n<Node hostname='botswana.maas' system_id='433334'>  Acquiring and starting nodes:  >>> help(origin.Nodes.acquire)\nacquire(*, hostname:str=None, architecture:str=None, cpus:int=None,\n        memory:float=None, tags:typing.Sequence=None) method of\n            alburnum.maas.viscera.NodesType instance\n    :param hostname: The hostname to match.\n    :param architecture: The architecture to match, e.g. \"amd64\".\n    :param cpus: The minimum number of CPUs to match.\n    :param memory: The minimum amount of RAM to match.\n    :param tags: The tags to match, as a sequence. Each tag may be\n        prefixed with a hyphen to denote that the given tag should NOT be\n        associated with a matched node.\n>>> node = origin.Nodes.acquire(tags=(\"foo\", \"-bar\"))\n>>> print(node.substatus_name)\nAcquired\n>>> node.start()\n>>> print(node.substatus_name)\nDeploying  Individual nodes can be read from the Web API.  >>> node = origin.Node.read(system_id=\"433333\")  Nodes have many useful attributes:  >>> node.architecture\n'amd64/generic'\n>>> node.cpus\n4  Trying using tab-completion \u2014 the objects have been designed to be\nparticularly friendly for interactive use \u2014 or  dir(node)  to find out\nwhat other fields and methods are available.  TODO : Updating nodes.",
            "title": "Nodes"
        },
        {
            "location": "/viscera/getting-started/index.html#files-users-tags",
            "text": "Similarly to nodes, these sets of objects can be fetched:  >>> tags = origin.Tags.read()\n>>> files = origin.Files.read()\n>>> users = origin.Users.read()  When reading from collections, as above, the returned object is\nlist-like:  >>> len(tags)\n5\n>>> tags[3]\n<Tag comment=\"Foo's stuff\" definition='' kernel_opts='' name='foo'>\n>>> tags[3] in tags\nTrue\n>>> not_foo = [tag for tag in tags if tag.name != 'foo']\n>>> len(not_foo)\n4  However, it\u2019s read-only:  >>> tags[0] = \"bob\"\n\u2026\nTypeError: 'Tags' object does not support item assignment",
            "title": "Files, Users, Tags"
        },
        {
            "location": "/viscera/getting-started/index.html#events",
            "text": "Events are similar\u2026 but different. The only way to get events is by\nthe  query  method:  >>> events = origin.Events.query()  This accepts a plethora of optional arguments to narrow down the results:  >>> events = origin.Events.query(hostnames={\"foo\", \"bar\"})\n>>> events = origin.Events.query(domains={\"example.com\", \"maas.io\"})\n>>> events = origin.Events.query(zones=[\"red\", \"blue\"])\n>>> events = origin.Events.query(macs=(\"12:34:56:78:90:ab\", ))\n>>> events = origin.Events.query(system_ids=\u2026)\n>>> events = origin.Events.query(agent_name=\u2026)\n>>> events = origin.Events.query(level=\u2026)\n>>> events = origin.Events.query(after=\u2026, limit=\u2026)  These arguments can be combined to narrow the results even further.  The  level  argument is a little special. It\u2019s a choice from a\npredefined set. For convenience, those choices are defined in the Level  enum:  >>> events = origin.Events.query(level=origin.Events.Level.ERROR)  but you can also pass in the string \u201cERROR\u201d or the number 40.",
            "title": "Events"
        },
        {
            "location": "/viscera/index.html",
            "text": "Viscera\n: High-level Python client API",
            "title": "Home"
        },
        {
            "location": "/viscera/index.html#viscera-high-level-python-client-api",
            "text": "",
            "title": "Viscera: High-level Python client API"
        }
    ]
}