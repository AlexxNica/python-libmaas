{"doc": "MAAS API", "hash": "907a3bb98fe782e45543b3cc4dc9a88755fd4331", "resources": [{"anon": null, "name": "MaasHandler", "auth": {"name": "MaasHandler", "doc": "Manage the MAAS server.", "uri": "http://localhost:5240/MAAS/api/1.0/maas/", "actions": [{"doc": "Set a config value.\n\n:param name: The name of the config item to be set.\n:type name: unicode\n:param value: The value of the config item to be set.\n:type value: json object\n\nAvailable configuration items:\n- upstream_dns: Upstream DNS used to resolve domains not managed by this MAAS (space-separated IP addresses).         Only used when MAAS is running its own DNS server. This value is used as the value of 'forwarders' in the DNS server config.\n- default_storage_layout: Default storage layout.         Storage layout that is applied to a node when it is acquired.        Available choices are: 'lvm' (LVM layout), 'flat' (Flat layout), 'bcache' (Bcache layout).\n- default_osystem: Default operating system used for deployment.\n- ports_archive: Ports archive.         Archive used by nodes to retrieve packages for non-Intel architectures. E.g. http://ports.ubuntu.com/ubuntu-ports.\n- http_proxy: Proxy for HTTP and HTTPS traffic.         This is used by the cluster and region controllers for downloading PXE boot images and other provisioning-related resources. This will also be passed onto provisioned nodes instead of the default proxy (the region controller proxy).\n- boot_images_auto_import: Automatically import/refresh the boot images every 60 minutes.\n- enable_third_party_drivers: Enable the installation of proprietary drivers (i.e. HPVSA).\n- kernel_opts: Boot parameters to pass to the kernel by default.\n- main_archive: Main archive.         Archive used by nodes to retrieve packages for Intel architectures. E.g. http://archive.ubuntu.com/ubuntu.\n- maas_name: MAAS name.\n- curtin_verbose: Run the fast-path installer with higher verbosity. This provides more detail in the installation logs..\n- dnssec_validation: Enable DNSSEC validation of upstream zones.         Only used when MAAS is running its own DNS server. This value is used as the value of 'dnssec_validation' in the DNS server config.\n- commissioning_distro_series: Default Ubuntu release used for commissioning.\n- windows_kms_host: Windows KMS activation host.         FQDN or IP address of the host that provides the KMS Windows activation service. (Only needed for Windows deployments using KMS activation.)\n- enable_disk_erasing_on_release: Erase nodes' disks prior to releasing..\n- default_distro_series: Default OS release used for deployment.\n- ntp_server: Address of NTP server for nodes.         NTP server address passed to nodes via a DHCP response. e.g. ntp.ubuntu.com", "op": "set_config", "restful": false, "method": "POST", "name": "set_config"}, {"doc": "Get a config value.\n\n:param name: The name of the config item to be retrieved.\n:type name: unicode\n\nAvailable configuration items:\n- upstream_dns: Upstream DNS used to resolve domains not managed by this MAAS (space-separated IP addresses).         Only used when MAAS is running its own DNS server. This value is used as the value of 'forwarders' in the DNS server config.\n- default_storage_layout: Default storage layout.         Storage layout that is applied to a node when it is acquired.        Available choices are: 'lvm' (LVM layout), 'flat' (Flat layout), 'bcache' (Bcache layout).\n- default_osystem: Default operating system used for deployment.\n- ports_archive: Ports archive.         Archive used by nodes to retrieve packages for non-Intel architectures. E.g. http://ports.ubuntu.com/ubuntu-ports.\n- http_proxy: Proxy for HTTP and HTTPS traffic.         This is used by the cluster and region controllers for downloading PXE boot images and other provisioning-related resources. This will also be passed onto provisioned nodes instead of the default proxy (the region controller proxy).\n- boot_images_auto_import: Automatically import/refresh the boot images every 60 minutes.\n- enable_third_party_drivers: Enable the installation of proprietary drivers (i.e. HPVSA).\n- kernel_opts: Boot parameters to pass to the kernel by default.\n- main_archive: Main archive.         Archive used by nodes to retrieve packages for Intel architectures. E.g. http://archive.ubuntu.com/ubuntu.\n- maas_name: MAAS name.\n- curtin_verbose: Run the fast-path installer with higher verbosity. This provides more detail in the installation logs..\n- dnssec_validation: Enable DNSSEC validation of upstream zones.         Only used when MAAS is running its own DNS server. This value is used as the value of 'dnssec_validation' in the DNS server config.\n- commissioning_distro_series: Default Ubuntu release used for commissioning.\n- windows_kms_host: Windows KMS activation host.         FQDN or IP address of the host that provides the KMS Windows activation service. (Only needed for Windows deployments using KMS activation.)\n- enable_disk_erasing_on_release: Erase nodes' disks prior to releasing..\n- default_distro_series: Default OS release used for deployment.\n- ntp_server: Address of NTP server for nodes.         NTP server address passed to nodes via a DHCP response. e.g. ntp.ubuntu.com", "op": "get_config", "restful": false, "method": "GET", "name": "get_config"}], "params": [], "path": "/MAAS/api/1.0/maas/"}}, {"anon": null, "name": "BcacheCacheSetHandler", "auth": {"name": "BcacheCacheSetHandler", "doc": "Manage bcache cache set on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcache-cache-set/{cache_set_id}/", "actions": [{"doc": "Delete bcache on node.\n\n:param cache_device: Cache block device to replace current one.\n:param cache_partition: Cache partition to replace current one.\n\nSpecifying both a cache_device and a cache_partition is not allowed.\n\nReturns 404 if the node or the cache set is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete cache set on node.\n\nReturns 400 if the cache set is in use.\nReturns 404 if the node or cache set is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read bcache cache set on node.\n\nReturns 404 if the node or cache set is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["system_id", "cache_set_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcache-cache-set/{cache_set_id}/"}}, {"anon": null, "name": "IPAddressesHandler", "auth": {"name": "IPAddressesHandler", "doc": "Manage IP addresses allocated by MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/ipaddresses/", "actions": [{"doc": "Reserve an IP address for use outside of MAAS.\n\nReturns an IP adddress, which MAAS will not allow any of its known\ndevices and Nodes to use; it is free for use by the requesting user\nuntil released by the user.\n\nThe user may supply either a range matching the subnet of an\nexisting cluster interface, or a specific IP address within the\nstatic IP address range on a cluster interface.\n\n:param network: CIDR representation of the network on which the IP\n    reservation is required. e.g. 10.1.2.0/24\n:param requested_address: the requested address, which must be within\n    a static IP address range managed by MAAS.\n:param hostname: the hostname to use for the specified IP address\n:type network: unicode\n\nReturns 400 if there is no network in MAAS matching the provided one,\nor a requested_address is supplied, but a corresponding network\ncould not be found.\nReturns 503 if there are no more IP addresses available.", "op": "reserve", "restful": false, "method": "POST", "name": "reserve"}, {"doc": "Release an IP address that was previously reserved by the user.\n\n:param ip: The IP address to release.\n:type ip: unicode\n\nReturns 404 if the provided IP address is not found.", "op": "release", "restful": false, "method": "POST", "name": "release"}, {"doc": "List IPAddresses.\n\nGet a listing of all IPAddresses allocated to the requesting user.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": [], "path": "/MAAS/api/1.0/ipaddresses/"}}, {"anon": null, "name": "NetworkHandler", "auth": {"name": "NetworkHandler", "doc": "Manage a network.\n\nThis endpoint is deprecated. Use the new 'subnet' endpoint instead.", "uri": "http://localhost:5240/MAAS/api/1.0/networks/{name}/", "actions": [{"doc": "Delete network definition.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Disconnect the given MAC addresses from this network.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.", "op": "disconnect_macs", "restful": false, "method": "POST", "name": "disconnect_macs"}, {"doc": "Returns the list of MAC addresses connected to this network.\n\nOnly MAC addresses for nodes visible to the requesting user are\nreturned.", "op": "list_connected_macs", "restful": false, "method": "GET", "name": "list_connected_macs"}, {"doc": "Connect the given MAC addresses to this network.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.", "op": "connect_macs", "restful": false, "method": "POST", "name": "connect_macs"}, {"doc": "Update network definition.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.\n\n:param name: A simple name for the network, to make it easier to\n    refer to.  Must consist only of letters, digits, dashes, and\n    underscores.\n:param ip: Base IP address for the network, e.g. `10.1.0.0`.  The host\n    bits will be zeroed.\n:param netmask: Subnet mask to indicate which parts of an IP address\n    are part of the network address.  For example, `255.255.255.0`.\n:param vlan_tag: Optional VLAN tag: a number between 1 and 0xffe (4094)\n    inclusive, or zero for an untagged network.\n:param description: Detailed description of the network for the benefit\n    of users and administrators.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read network definition.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["name"], "path": "/MAAS/api/1.0/networks/{name}/"}}, {"anon": {"name": "VersionHandler", "doc": "Information about this MAAS instance.\n\nThis returns a JSON dictionary with information about this\nMAAS instance::\n\n    {\n        'version': '1.8.0',\n        'subversion': 'alpha10+bzr3750',\n        'capabilities': ['capability1', 'capability2', ...]\n    }", "uri": "http://localhost:5240/MAAS/api/1.0/version/", "actions": [{"doc": "Version and capabilities of this MAAS instance.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": [], "path": "/MAAS/api/1.0/version/"}, "name": "VersionHandler", "auth": null}, {"anon": null, "name": "CommissioningScriptHandler", "auth": {"name": "CommissioningScriptHandler", "doc": "Manage a custom commissioning script.\n\nThis functionality is only available to administrators.", "uri": "http://localhost:5240/MAAS/api/1.0/commissioning-scripts/{name}", "actions": [{"doc": "Update a commissioning script.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a commissioning script.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a commissioning script.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["name"], "path": "/MAAS/api/1.0/commissioning-scripts/{name}"}}, {"anon": null, "name": "FanNetworksHandler", "auth": {"name": "FanNetworksHandler", "doc": "Manage Fan Networks.", "uri": "http://localhost:5240/MAAS/api/1.0/fannetworks/", "actions": [{"doc": "List all fannetworks.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a fannetwork.\n\n:param name: Name of the fannetwork.\n:param overlay: Overlay network\n:param underlay: Underlay network\n:param dhcp: confiugre dhcp server for overlay net\n:param host_reserve: number of IP addresses to reserve for host\n:param bridge: override bridge name\n:param off: put this int he config, but disable it.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/fannetworks/"}}, {"anon": null, "name": "BcacheCacheSetsHandler", "auth": {"name": "BcacheCacheSetsHandler", "doc": "Manage bcache cache sets on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcache-cache-sets/", "actions": [{"doc": "List all bcache cache sets belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Creates a Bcache Cache Set.\n\n:param cache_device: Cache block device.\n:param cache_partition: Cache partition.\n\nSpecifying both a cache_device and a cache_partition is not allowed.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcache-cache-sets/"}}, {"anon": null, "name": "FabricHandler", "auth": {"name": "FabricHandler", "doc": "Manage fabric.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/{fabric_id}/", "actions": [{"doc": "Update fabric.\n\n:param name: Name of the fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["fabric_id"], "path": "/MAAS/api/1.0/fabrics/{fabric_id}/"}}, {"anon": null, "name": "BlockDeviceHandler", "auth": {"name": "BlockDeviceHandler", "doc": "Manage a block device on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/", "actions": [{"doc": "Unmount the filesystem on block device.\n\nReturns 400 if the block device is not formatted or not currently             mounted.\nReturns 403 when the user doesn't have the ability to unmount the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "unmount", "restful": false, "method": "POST", "name": "unmount"}, {"doc": "Set this block device as the boot disk for the node.\n\nReturns 400 if the block device is a virtual block device.\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready or Allocated.", "op": "set_boot_disk", "restful": false, "method": "POST", "name": "set_boot_disk"}, {"doc": "Unformat block device with filesystem.\n\nReturns 400 if the block device is not formatted, currently mounted,             or part of a filesystem group.\nReturns 403 when the user doesn't have the ability to unformat the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "unformat", "restful": false, "method": "POST", "name": "unformat"}, {"doc": "Add a tag to block device on node.\n\n:param tag: The tag being added.\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready.", "op": "add_tag", "restful": false, "method": "GET", "name": "add_tag"}, {"doc": "Delete block device on node.\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to delete the block device.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Mount the filesystem on block device.\n\n:param mount_point: Path on the filesystem to mount.\n\nReturns 403 when the user doesn't have the ability to mount the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "mount", "restful": false, "method": "POST", "name": "mount"}, {"doc": "Format block device with filesystem.\n\n:param fstype: Type of filesystem.\n:param uuid: UUID of the filesystem.\n\nReturns 403 when the user doesn't have the ability to format the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "format", "restful": false, "method": "POST", "name": "format"}, {"doc": "Update block device on node.\n\nFields for physical block device:\n:param name: Name of the block device.\n:param model: Model of the block device.\n:param serial: Serial number of the block device.\n:param id_path: (optional) Only used if model and serial cannot be             provided. This should be a path that is fixed and doesn't change             depending on the boot order or kernel version.\n:param size: Size of the block device.\n:param block_size: Block size of the block device.\n\nFields for virtual block device:\n:param name: Name of the block device.\n:param uuid: UUID of the block device.\n:param size: Size of the block device. (Only allowed for logical             volumes.)\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read block device on node.\n\nReturns 404 if the node or block device is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Remove a tag from block device on node.\n\n:param tag: The tag being removed.\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready.", "op": "remove_tag", "restful": false, "method": "GET", "name": "remove_tag"}], "params": ["system_id", "device_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/"}}, {"anon": null, "name": "NodeGroupInterfacesHandler", "auth": {"name": "NodeGroupInterfacesHandler", "doc": "Manage the collection of all the NodeGroupInterfaces in this MAAS.\n\nA NodeGroupInterface is a network interface attached to a cluster\ncontroller, with its network properties.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/interfaces/", "actions": [{"doc": "List of NodeGroupInterfaces of a NodeGroup.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Create a new NodeGroupInterface for this NodeGroup.\n\n:param name: Name for the interface.  Must be unique within this\n    cluster.  Only letters, digits, dashes, and colons are allowed.\n:param ip: Static IP of the interface.\n:type ip: unicode (IP Address)\n:param interface: Name of the network interface that connects the\n    cluster controller to this network.\n:type interface: unicode\n:param management: The service(s) MAAS should manage on this interface.\n:type management: Vocabulary `NODEGROUPINTERFACE_MANAGEMENT`\n:param subnet_mask: Subnet mask, e.g. 255.0.0.0.\n:type subnet_mask: unicode (IP Address)\n:param broadcast_ip: Broadcast address for this subnet.\n:type broadcast_ip: unicode (IP Address)\n:param router_ip: Address of default gateway.\n:type router_ip: unicode (IP Address)\n:param ip_range_low: Lowest dynamic IP address to assign to clients.\n:type ip_range_low: unicode (IP Address)\n:param ip_range_high: Highest dynamic IP address to assign to clients.\n:type ip_range_high: unicode (IP Address)\n:param static_ip_range_low: Lowest static IP address to assign to\n    clients.\n:type static_ip_range_low: unicode (IP Address)\n:param static_ip_range_high: Highest static IP address to assign to\n    clients.\n:type static_ip_range_high: unicode (IP Address)\n\nReturns 404 if the node group (cluster) is not found.\nReturns 403 if the user does not have permission to access the\ninterface.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": ["uuid"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/interfaces/"}}, {"anon": null, "name": "EventsHandler", "auth": {"name": "EventsHandler", "doc": "Retrieve filtered node events.\n\nA specific Node's events is identified by specifying one or more\nids, hostnames, or mac addresses as a list.", "uri": "http://localhost:5240/MAAS/api/1.0/events/", "actions": [{"doc": "List Node events, optionally filtered by various criteria via\nURL query parameters.\n\n:param hostname: An optional hostname. Only events relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to get events relating to more than one node.\n:param mac_address: An optional list of MAC addresses.  Only\n    nodes with matching MAC addresses will be returned.\n:param id: An optional list of system ids.  Only nodes with\n    matching system ids will be returned.\n:param zone: An optional name for a physical zone. Only nodes in the\n    zone will be returned.\n:param agent_name: An optional agent name.  Only nodes with\n    matching agent names will be returned.\n:param level: Desired minimum log level of returned events. Returns\n    this level of events and greater. Choose from: DEBUG, INFO, WARNING, CRITICAL, ERROR.\n    The default is INFO.", "op": "query", "restful": false, "method": "GET", "name": "query"}], "params": [], "path": "/MAAS/api/1.0/events/"}}, {"anon": null, "name": "BootSourceSelectionsHandler", "auth": {"name": "BootSourceSelectionsHandler", "doc": "Manage the collection of boot source selections.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/", "actions": [{"doc": "List boot source selections.\n\nGet a listing of a boot source's selections.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new boot source selection.\n\n:param release: The release for which to import resources.\n:param arches: The architecture list for which to import resources.\n:param subarches: The subarchitecture list for which to import\n    resources.\n:param labels: The label lists for which to import resources.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["boot_source_id"], "path": "/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/"}}, {"anon": null, "name": "NodeInterfaceHandler", "auth": {"name": "NodeInterfaceHandler", "doc": "Manage a node's interface.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/interfaces/{interface_id}/", "actions": [{"doc": "Delete interface on node.\n\nReturns 404 if the node or interface is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Link interface to a subnet.\n\n:param mode: AUTO, DHCP, STATIC or LINK_UP connection to subnet.\n:param subnet: Subnet linked to interface.\n:param ip_address: IP address for the interface in subnet. Only used\n    when mode is STATIC. If not provided an IP address from subnet\n    will be auto selected.\n:param default_gateway: True sets the gateway IP address for the subnet\n    as the default gateway for the node this interface belongs to.\n    Option can only be used with the AUTO and STATIC modes.\n\nMode definitions:\nAUTO - Assign this interface a static IP address from the provided\nsubnet. The subnet must be a managed subnet. The IP address will\nnot be assigned until the node goes to be deployed.\n\nDHCP - Bring this interface up with DHCP on the given subnet. Only\none subnet can be set to DHCP. If the subnet is managed this\ninterface will pull from the dynamic IP range.\n\nSTATIC - Bring this interface up with a STATIC IP address on the\ngiven subnet. Any number of STATIC links can exist on an interface.\n\nLINK_UP - Bring this interface up only on the given subnet. No IP\naddress will be assigned to this interface. The interface cannot\nhave any current AUTO, DHCP or STATIC links.\n\nReturns 404 if the node or interface is not found.", "op": "link_subnet", "restful": false, "method": "POST", "name": "link_subnet"}, {"doc": "Set the node to use this interface as the default gateway.\n\nIf this interface has more than one subnet with a gateway IP in the\nsame IP address family then specifying the ID of the link on\nthis interface is required.\n\n:param link_id: ID of the link on this interface to select the\n    default gateway IP address from.\n\nReturns 400 if the interface has not AUTO or STATIC links.\nReturns 404 if the node or interface is not found.", "op": "set_default_gateway", "restful": false, "method": "POST", "name": "set_default_gateway"}, {"doc": "Update interface on node.\n\nFields for physical interface:\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Untagged VLAN the interface is connected to.\n\nFields for bond interface:\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Tagged VLAN the interface is connected to.\n:param parents: Parent interfaces that make this bond.\n\nFields for VLAN interface:\n:param tags: Tags for the interface.\n:param vlan: VLAN the interface is connected to.\n:param parent: Parent interface for this VLAN interface.\n\nFollowing are extra parameters that can be set on all interface types:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nFollowing are parameters specific to bonds:\n\n:param bond-mode: The operating mode of the bond.\n    (Default: active-backup).\n:param bond-miimon: The link monitoring freqeuncy in milliseconds.\n    (Default: 100).\n:param bond-downdelay: Specifies the time, in milliseconds, to wait\n    before disabling a slave after a link failure has been detected.\n:param bond-updelay: Specifies the time, in milliseconds, to wait\n    before enabling a slave after a link recovery has been detected.\n:param bond-lacp_rate: Option specifying the rate in which we'll ask\n    our link partner to transmit LACPDU packets in 802.3ad mode.\n    Available options are fast or slow. (Default: slow).\n:param bond-xmit_hash_policy: The transmit hash policy to use for\n    slave selection in balance-xor, 802.3ad, and tlb modes.\n\nSupported bonding modes (bond-mode):\nbalance-rr - Transmit packets in sequential order from the first\navailable slave through the last.  This mode provides load balancing\nand fault tolerance.\n\nactive-backup - Only one slave in the bond is active.  A different\nslave becomes active if, and only if, the active slave fails.  The\nbond's MAC address is externally visible on only one port (network\nadapter) to avoid confusing the switch.\n\nbalance-xor - Transmit based on the selected transmit hash policy.\nThe default policy is a simple [(source MAC address XOR'd with\ndestination MAC address XOR packet type ID) modulo slave count].\n\nbroadcast - Transmits everything on all slave interfaces. This mode\nprovides fault tolerance.\n\n802.3ad - IEEE 802.3ad Dynamic link aggregation.  Creates aggregation\ngroups that share the same speed and duplex settings.  Utilizes all\nslaves in the active aggregator according to the 802.3ad specification.\n\nbalance-tlb - Adaptive transmit load balancing: channel bonding that\ndoes not require any special switch support.\n\nbalance-alb - Adaptive load balancing: includes balance-tlb plus\nreceive load balancing (rlb) for IPV4 traffic, and does not require any\nspecial switch support.  The receive load balancing is achieved by\nARP negotiation.\n\nReturns 404 if the node or interface is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read interface on node.\n\nReturns 404 if the node or interface is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Unlink interface to a subnet.\n\n:param id: ID of the link on the interface to remove.\n\nReturns 404 if the node or interface is not found.", "op": "unlink_subnet", "restful": false, "method": "POST", "name": "unlink_subnet"}], "params": ["system_id", "interface_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/interfaces/{interface_id}/"}}, {"anon": null, "name": "VlansHandler", "auth": {"name": "VlansHandler", "doc": "Manage VLANs on a fabric.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/{fabric_id}/vlans/", "actions": [{"doc": "List all VLANs belonging to fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a VLAN.\n\n:param name: Name of the VLAN.\n:param vid: VLAN ID of the VLAN.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["fabric_id"], "path": "/MAAS/api/1.0/fabrics/{fabric_id}/vlans/"}}, {"anon": null, "name": "SubnetHandler", "auth": {"name": "SubnetHandler", "doc": "Manage subnet.", "uri": "http://localhost:5240/MAAS/api/1.0/subnets/{subnet_id}/", "actions": [{"doc": "Returns statistics for the specified subnet, including:\n\nnum_available - the number of available IP addresses\nlargest_available - the largest number of contiguous free IP addresses\nnum_unavailable - the number of unavailable IP addresses\ntotal_addresses - the sum of the available plus unavailable addresses\nusage - the (floating point) usage percentage of this subnet\nusage_string - the (formatted unicode) usage percentage of this subnet\nranges - the specific IP ranges present in ths subnet (if specified)\n\nOptional arguments:\ninclude_ranges: if True, includes detailed information\nabout the usage of this range.\n\nReturns 404 if the subnet is not found.", "op": "statistics", "restful": false, "method": "GET", "name": "statistics"}, {"doc": "Delete subnet.\n\nReturns 404 if the subnet is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Returns a summary of IP addresses assigned to this subnet.\n\nOptional arguments:\nwith_username: (default=True) if False, suppresses the display\nof usernames associated with each address.\nwith_node_summary: (default=True) if False, suppresses the display\nof any node associated with each address.", "op": "ip_addresses", "restful": false, "method": "GET", "name": "ip_addresses"}, {"doc": "Lists IP ranges currently reserved in the subnet.\n\nReturns 404 if the subnet is not found.", "op": "reserved_ip_ranges", "restful": false, "method": "GET", "name": "reserved_ip_ranges"}, {"doc": "Lists IP ranges currently unreserved in the subnet.\n\nReturns 404 if the subnet is not found.", "op": "unreserved_ip_ranges", "restful": false, "method": "GET", "name": "unreserved_ip_ranges"}, {"doc": "Update subnet.\n\n:param name: Name of the subnet.\n:param vlan: VLAN this subnet belongs to.\n:param space: Space this subnet is in.\n:param cidr: The network CIDR for this subnet.\n:param gateway_ip: The gateway IP address for this subnet.\n:param dns_servers: Comma-seperated list of DNS servers for this             subnet.\n\nReturns 404 if the subnet is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read subnet.\n\nReturns 404 if the subnet is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["subnet_id"], "path": "/MAAS/api/1.0/subnets/{subnet_id}/"}}, {"anon": null, "name": "PartitionHandler", "auth": {"name": "PartitionHandler", "doc": "Manage partition on a block device.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partition/{partition_id}", "actions": [{"doc": "Delete partition.\n\nReturns 404 if the node, block device, or partition are not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Mount the filesystem on partition.\n\n:param mount_point: Path on the filesystem to mount.\n\nReturns 403 when the user doesn't have the ability to mount the             partition.\nReturns 404 if the node, block device, or partition is not found.", "op": "mount", "restful": false, "method": "POST", "name": "mount"}, {"doc": "Format a partition.\n\n:param fstype: Type of filesystem.\n:param uuid: The UUID for the filesystem.\n:param label: The label for the filesystem.\n\nReturns 403 when the user doesn't have the ability to format the             partition.\nReturns 404 if the node, block device, or partition is not found.", "op": "format", "restful": false, "method": "POST", "name": "format"}, {"doc": "Read partition.\n\nReturns 404 if the node, block device, or partition are not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Unmount the filesystem on partition.\n\nReturns 400 if the partition is not formatted or not currently             mounted.\nReturns 403 when the user doesn't have the ability to unmount the             partition.\nReturns 404 if the node, block device, or partition is not found.", "op": "unmount", "restful": false, "method": "POST", "name": "unmount"}, {"doc": "Unformat a partition.", "op": "unformat", "restful": false, "method": "POST", "name": "unformat"}], "params": ["system_id", "device_id", "partition_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partition/{partition_id}"}}, {"anon": null, "name": "SSHKeyHandler", "auth": {"name": "SSHKeyHandler", "doc": "Manage an SSH key.\n\nSSH keys can be retrieved or deleted.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sshkeys/{keyid}/", "actions": [{"doc": "DELETE an SSH key.\n\nReturns 404 if the key does not exist.\nReturns 401 if the key does not belong to the calling user.", "op": "delete", "restful": false, "method": "POST", "name": "delete"}, {"doc": "DELETE an SSH key.\n\nReturns 404 if the key does not exist.\nReturns 401 if the key does not belong to the calling user.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET an SSH key.\n\nReturns 404 if the key does not exist.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["keyid"], "path": "/MAAS/api/1.0/account/prefs/sshkeys/{keyid}/"}}, {"anon": null, "name": "AccountHandler", "auth": {"name": "AccountHandler", "doc": "Manage the current logged-in user.", "uri": "http://localhost:5240/MAAS/api/1.0/account/", "actions": [{"doc": "Create an authorisation OAuth token and OAuth consumer.\n\n:return: a json dict with three keys: 'token_key',\n    'token_secret' and 'consumer_key' (e.g.\n    {token_key: 's65244576fgqs', token_secret: 'qsdfdhv34',\n    consumer_key: '68543fhj854fg'}).\n:rtype: string (json)", "op": "create_authorisation_token", "restful": false, "method": "POST", "name": "create_authorisation_token"}, {"doc": "Delete an authorisation OAuth token and the related OAuth consumer.\n\n:param token_key: The key of the token to be deleted.\n:type token_key: unicode", "op": "delete_authorisation_token", "restful": false, "method": "POST", "name": "delete_authorisation_token"}], "params": [], "path": "/MAAS/api/1.0/account/"}}, {"anon": null, "name": "NodeInterfacesHandler", "auth": {"name": "NodeInterfacesHandler", "doc": "Manage interfaces on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/interfaces/", "actions": [{"doc": "Create a physical interface on node.\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Untagged VLAN the interface is connected to.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.", "op": "create_physical", "restful": false, "method": "POST", "name": "create_physical"}, {"doc": "List all interfaces belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a bond interface on node.\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: VLAN the interface is connected to.\n:param parents: Parent interfaces that make this bond.\n\nFollowing are parameters specific to bonds:\n\n:param bond_mode: The operating mode of the bond.\n    (Default: active-backup).\n:param bond_miimon: The link monitoring freqeuncy in milliseconds.\n    (Default: 100).\n:param bond_downdelay: Specifies the time, in milliseconds, to wait\n    before disabling a slave after a link failure has been detected.\n:param bond_updelay: Specifies the time, in milliseconds, to wait\n    before enabling a slave after a link recovery has been detected.\n:param bond_lacp_rate: Option specifying the rate in which we'll ask\n    our link partner to transmit LACPDU packets in 802.3ad mode.\n    Available options are fast or slow. (Default: slow).\n:param bond_xmit_hash_policy: The transmit hash policy to use for\n    slave selection in balance-xor, 802.3ad, and tlb modes.\n    (Default: layer2)\n\nSupported bonding modes (bond-mode):\nbalance-rr - Transmit packets in sequential order from the first\navailable slave through the last.  This mode provides load balancing\nand fault tolerance.\n\nactive-backup - Only one slave in the bond is active.  A different\nslave becomes active if, and only if, the active slave fails.  The\nbond's MAC address is externally visible on only one port (network\nadapter) to avoid confusing the switch.\n\nbalance-xor - Transmit based on the selected transmit hash policy.\nThe default policy is a simple [(source MAC address XOR'd with\ndestination MAC address XOR packet type ID) modulo slave count].\n\nbroadcast - Transmits everything on all slave interfaces. This mode\nprovides fault tolerance.\n\n802.3ad - IEEE 802.3ad Dynamic link aggregation.  Creates aggregation\ngroups that share the same speed and duplex settings.  Utilizes all\nslaves in the active aggregator according to the 802.3ad specification.\n\nbalance-tlb - Adaptive transmit load balancing: channel bonding that\ndoes not require any special switch support.\n\nbalance-alb - Adaptive load balancing: includes balance-tlb plus\nreceive load balancing (rlb) for IPV4 traffic, and does not require any\nspecial switch support.  The receive load balancing is achieved by\nARP negotiation.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.", "op": "create_bond", "restful": false, "method": "POST", "name": "create_bond"}, {"doc": "Create a VLAN interface on node.\n\n:param tags: Tags for the interface.\n:param vlan: Tagged VLAN the interface is connected to.\n:param parent: Parent interface for this VLAN interface.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.", "op": "create_vlan", "restful": false, "method": "POST", "name": "create_vlan"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/interfaces/"}}, {"anon": null, "name": "LicenseKeyHandler", "auth": {"name": "LicenseKeyHandler", "doc": "Manage a license key.", "uri": "http://localhost:5240/MAAS/api/1.0/license-key/{osystem}/{distro_series}", "actions": [{"doc": "Update license key.\n\n:param osystem: Operating system that the key belongs to.\n:param distro_series: OS release that the key belongs to.\n:param license_key: License key for osystem/distro_series combo.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete license key.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read license key.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["osystem", "distro_series"], "path": "/MAAS/api/1.0/license-key/{osystem}/{distro_series}"}}, {"anon": null, "name": "PartitionsHandler", "auth": {"name": "PartitionsHandler", "doc": "Manage partitions on a block device.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partitions/", "actions": [{"doc": "List all partitions on the block device.\n\nReturns 404 if the node or the block device are not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a partition on the block device.\n\n:param size: The size of the partition.\n:param uuid: UUID for the partition. Only used if the partition table\n    type for the block device is GPT.\n:param bootable: If the partition should be marked bootable.\n\nReturns 404 if the node or the block device are not found.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id", "device_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partitions/"}}, {"anon": null, "name": "SpacesHandler", "auth": {"name": "SpacesHandler", "doc": "Manage spaces.", "uri": "http://localhost:5240/MAAS/api/1.0/spaces/", "actions": [{"doc": "List all spaces.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a space.\n\n:param name: Name of the space.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/spaces/"}}, {"anon": null, "name": "SSHKeysHandler", "auth": {"name": "SSHKeysHandler", "doc": "Manage the collection of all the SSH keys in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sshkeys/", "actions": [{"doc": "List all keys belonging to the requesting user.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Add a new SSH key to the requesting user's account.\n\nThe request payload should contain the public SSH key data in form\ndata whose name is \"key\".", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/account/prefs/sshkeys/"}}, {"anon": null, "name": "NodeGroupHandler", "auth": {"name": "NodeGroupHandler", "doc": "Manage a NodeGroup.\n\nNodeGroup is the internal name for a cluster.\n\nThe NodeGroup is identified by its UUID, a random identifier that looks\nsomething like:\n\n    5977f6ab-9160-4352-b4db-d71a99066c4f\n\nEach NodeGroup has its own uuid.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/", "actions": [{"doc": "Obtain various system details for each node specified.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{system_id: {detail_type: xml, ...}, ...}`` map,\nwhere ``detail_type`` is something like \"lldp\" or \"lshw\".\n\n:param system_ids: System ids of nodes for which to get system details.\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nFor security purposes:\n\na) Requests are only fulfilled for the worker assigned to the\n   nodegroup.\nb) Requests for nodes that are not part of the nodegroup are\n   just ignored.\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.", "op": "details", "restful": false, "method": "POST", "name": "details"}, {"doc": "Add the nodes from a Moonshot HP iLO Chassis Manager (MSCM).\n\n**Warning: this API is deprecated in favor of\nprobe_and_enlist_hardware.**\n\n:param host: IP Address for the MSCM.\n:type host: unicode\n:param username: The username for the MSCM.\n:type username: unicode\n:param password: The password for the MSCM.\n:type password: unicode\n:param accept_all: If true, all enlisted nodes will be\n    commissioned.\n:type accept_all: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "probe_and_enlist_mscm", "restful": false, "method": "POST", "name": "probe_and_enlist_mscm"}, {"doc": "Add the nodes from a Cisco UCS Manager.\n\n**Warning: this API is deprecated in favor of\nprobe_and_enlist_hardware.**\n\n:param url: The URL of the UCS Manager API.\n:type url: unicode\n:param username: The username for the API.\n:type username: unicode\n:param password: The password for the API.\n:type password: unicode\n:param accept_all: If true, all enlisted nodes will be\n    commissioned.\n:type accept_all: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "probe_and_enlist_ucsm", "restful": false, "method": "POST", "name": "probe_and_enlist_ucsm"}, {"doc": "Import the pxe files on this cluster controller.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "import_boot_images", "restful": false, "method": "POST", "name": "import_boot_images"}, {"doc": "Get the list of node ids that are part of this group.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "list_nodes", "restful": false, "method": "GET", "name": "list_nodes"}, {"doc": "Add special hardware types.\n\n:param model: The type of hardware. 'seamicro15k', 'virsh', 'vmware',\n    'powerkvm', 'mscm', 'msftocs' and 'ucsm' are supported.\n\n    seamicro15k is the model for the Seamicro 1500 Chassis.\n    virsh is the model for Virtual Machines managed by Virsh.\n    powerkvm is the model for Virtual Machines on Power KVM,\n    managed by Virsh.\n    mscm is the model for the Moonshot Chassis Manager.\n    msftocs is the model for the Microsoft OCS Chassis Manager.\n    ucsm is the model for the Cisco UCS Manager.\n\n:type model: unicode\n\nThe following are optional for all models:\n\n:param accept_all: If true, all enlisted nodes will be\n    commissioned.\n:type accept_all: unicode\n\nThe following are required if you are probing seamicro15k:\n\n:param mac: The MAC of the seamicro15k chassis.\n:type mac: unicode\n:param username: The username for the chassis.\n:type username: unicode\n:param password: The password for the chassis.\n:type password: unicode\n\nThe following are optional if you are probing seamicro15k:\n\n:param power_control: The power_control to use, either ipmi (default)\n    or restapi.\n:type power_control: unicode\n\nThe following are required if you are probing virsh:\n\n:param power_address: The connection string to virsh.\n:type power_address: unicode\n\nThe following are optional if you are probing virsh:\n\n:param power_pass: The password to use, when qemu+ssh is given as a\n    connection string and ssh key authentication is not being used.\n:type power_pass: unicode\n:param prefix_filter: Filter nodes with supplied prefix.\n:type prefix_filter: unicode\n\nThe following are required if you are probing vmware:\n\n:param host: The VMware hostname or IP address\n:type host: unicode\n:param username: The VMware API username\n:type username: unicode\n:param password: The VMware API password\n:type password: unicode\n\n\nThe following are optional if you are probing vmware:\n\n:param protocol: The VMware API protocol (default: https)\n:type protocol: unicode\n:param port: The VMware API port (default: 443)\n:type port: integer\n:param prefix_filter: Filter nodes with supplied prefix.\n:type prefix_filter: unicode\n\nThe following are required if you are probing mscm:\n\n:param host: IP Address for the Moonshot Chassis Manager.\n:type host: unicode\n:param username: The username for the Moonshot Chassis Manager.\n:type username: unicode\n:param password: The password for the Moonshot Chassis Manager.\n:type password: unicode\n\nThe followeing are required if you are probing msftocs:\n\n:param ip: IP Address for the Microsoft OCS Chassis.\n:type ip: unicode\n:param port: Port for the Microsoft OCS Chassis.\n:type port: unicode\n:param username: The username for the Microsoft OCS Chassis.\n:type username: unicode\n:param password: The password for the Microsoft OCS Chassis.\n:type password: unicode\n\nThe followeing are required if you are probing a ucsm:\n\n:param url: The URL of the UCS Manager API.\n:type url: unicode\n:param username: The username for the UCS Manager API.\n:type username: unicode\n:param password: The password for the UCS Manager API.\n:type password: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "probe_and_enlist_hardware", "restful": false, "method": "POST", "name": "probe_and_enlist_hardware"}, {"doc": "Report progress of a download.\n\nCluster controllers can call this to update the region controller on\nfile downloads they need to perform, such as kernels and initrd files.\nThis gives the administrator insight into what downloads are in\nprogress, how well downloads are going, and what failures may have\noccurred.\n\nA file is identified by an arbitrary name, which must be consistent.\nIt could be a URL, or a filesystem path, or even a symbolic name that\nthe cluster controller makes up.  A cluster controller can download\nthe same file many times over, but not simultaneously.\n\nBefore downloading a file, a cluster controller first reports progress\nwithout the `bytes_downloaded` parameter.  It may optionally report\nprogress while downloading, passing the number of bytes downloaded\nso far.  Finally, if the download succeeded, it should report one final\ntime with the full number of bytes downloaded.\n\nIf the download fails, the cluster controller should report progress\nwith an error string (and either the number of bytes that were\nsuccessfully downloaded, or zero).\n\nProgress reports should include the file's size, if known.  The final\nreport after a successful download must include the size.\n\n:param filename: Arbitrary identifier for the file being downloaded.\n:type filename: unicode\n:param size: Optional size of the file, in bytes.  Must be passed at\n    least once, though it can still be passed on subsequent calls.  If\n    file size is not known, pass it at the end when reporting\n    successful completion.  Do not change the size once given.\n:param bytes_downloaded: Number of bytes that have been successfully\n    downloaded.  Cannot exceed `size`, if known.  This parameter must\n    be omitted from the initial progress report before download starts,\n    and must be included for all subsequent progress reports for that\n    download.\n:type bytes_downloaded: int\n:param error: Optional error string.  A download that has submitted an\n    error with its last progress report is considered to have failed.\n:type error: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "report_download_progress", "restful": false, "method": "POST", "name": "report_download_progress"}, {"doc": "Update a specific cluster.\n\n:param name: The new DNS name for this cluster.\n:type name: unicode\n:param cluster_name: The new name for this cluster.\n:type cluster_name: unicode\n:param status: The new status for this cluster (see\n    vocabulary `NODEGROUP_STATUS`).\n:type status: int\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "GET a node group.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["uuid"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/"}}, {"anon": null, "name": "BlockDevicesHandler", "auth": {"name": "BlockDevicesHandler", "doc": "Manage block devices on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/", "actions": [{"doc": "List all block devices belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a physical block device.\n\n:param name: Name of the block device.\n:param model: Model of the block device.\n:param serial: Serial number of the block device.\n:param id_path: (optional) Only used if model and serial cannot be\n    provided. This should be a path that is fixed and doesn't change\n    depending on the boot order or kernel version.\n:param size: Size of the block device.\n:param block_size: Block size of the block device.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/"}}, {"anon": null, "name": "VolumeGroupHandler", "auth": {"name": "VolumeGroupHandler", "doc": "Manage volume group on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/volume-group/{volume_group_id}/", "actions": [{"doc": "Read volume group on node.\n\n:param name: Name of the volume group.\n:param uuid: UUID of the volume group.\n:param add_block_devices: Block devices to add to the volume group.\n:param remove_block_devices: Block devices to remove from the\n    volume group.\n:param add_partitions: Partitions to add to the volume group.\n:param remove_partitions: Partitions to remove from the volume group.\n\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete volume group on node.\n\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Delete a logical volume in the volume group.\n\n:param id: ID of the logical volume.\n\nReturns 403 if no logical volume with id.\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": "delete_logical_volume", "restful": false, "method": "POST", "name": "delete_logical_volume"}, {"doc": "Read volume group on node.\n\nReturns 404 if the node or volume group is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a logical volume in the volume group.\n\n:param name: Name of the logical volume.\n:param uuid: (optional) UUID of the logical volume.\n:param size: Size of the logical volume.\n\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": "create_logical_volume", "restful": false, "method": "POST", "name": "create_logical_volume"}], "params": ["system_id", "volume_group_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/volume-group/{volume_group_id}/"}}, {"anon": null, "name": "SSLKeyHandler", "auth": {"name": "SSLKeyHandler", "doc": "Manage an SSL key.\n\nSSL keys can be retrieved or deleted.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sslkeys/{keyid}/", "actions": [{"doc": "DELETE an SSL key.\n\nReturns 401 if the key does not belong to the requesting user.\nReturns 204 if the key is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET an SSL key.\n\nReturns 404 if the keyid is not found.\nReturns 401 if the key does not belong to the requesting user.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "DELETE an SSL key.\n\nReturns 401 if the key does not belong to the requesting user.\nReturns 204 if the key is successfully deleted.", "op": "delete", "restful": false, "method": "GET", "name": "delete"}], "params": ["keyid"], "path": "/MAAS/api/1.0/account/prefs/sslkeys/{keyid}/"}}, {"anon": null, "name": "SubnetsHandler", "auth": {"name": "SubnetsHandler", "doc": "Manage subnets.", "uri": "http://localhost:5240/MAAS/api/1.0/subnets/", "actions": [{"doc": "List all subnets.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a subnet.\n\n:param name: Name of the subnet.\n:param fabric: Fabric for the subnet. Defaults to the fabric the\n    provided VLAN belongs to or defaults to the default fabric.\n:param vlan: VLAN this subnet belongs to. Defaults to the default\n    VLAN for the provided fabric or defaults to the default VLAN in\n    the default fabric.\n:param vid: VID of the VLAN this subnet belongs to. Only used when\n    vlan is not provided. Picks the VLAN with this VID in the provided\n    fabric or the default fabric if one is not given.\n:param space: Space this subnet is in. Defaults to the default space.\n:param cidr: The network CIDR for this subnet.\n:param gateway_ip: The gateway IP address for this subnet.\n:param dns_servers: Comma-seperated list of DNS servers for this             subnet.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/subnets/"}}, {"anon": {"name": "AnonNodeGroupsHandler", "doc": "Anonymous access to NodeGroups.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/", "actions": [{"doc": "List of node groups.", "op": "list", "restful": false, "method": "GET", "name": "list"}], "params": [], "path": "/MAAS/api/1.0/nodegroups/"}, "name": "NodeGroupsHandler", "auth": {"name": "NodeGroupsHandler", "doc": "Manage the collection of all the nodegroups in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/", "actions": [{"doc": "List nodegroups.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Reject nodegroup enlistment(s).\n\n:param uuid: The UUID (or list of UUIDs) of the nodegroup(s) to reject.\n:type name: unicode (or list of unicodes)\n\nThis method is reserved to admin users and returns 403 if the\nuser is not an admin.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "reject", "restful": false, "method": "POST", "name": "reject"}, {"doc": "Import the boot images on all the accepted cluster controllers.", "op": "import_boot_images", "restful": false, "method": "POST", "name": "import_boot_images"}, {"doc": "Accept nodegroup enlistment(s).\n\n:param uuid: The UUID (or list of UUIDs) of the nodegroup(s) to accept.\n:type name: unicode (or list of unicodes)\n\nThis method is reserved to admin users and returns 403 if the\nuser is not an admin.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "accept", "restful": false, "method": "POST", "name": "accept"}, {"doc": "Query all the cluster controllers for power information.\n\n:return: a list of dicts that describe the power types in this format.", "op": "describe_power_types", "restful": false, "method": "GET", "name": "describe_power_types"}], "params": [], "path": "/MAAS/api/1.0/nodegroups/"}}, {"anon": null, "name": "LicenseKeysHandler", "auth": {"name": "LicenseKeysHandler", "doc": "Manage the license keys.", "uri": "http://localhost:5240/MAAS/api/1.0/license-keys/", "actions": [{"doc": "List license keys.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Define a license key.\n\n:param osystem: Operating system that the key belongs to.\n:param distro_series: OS release that the key belongs to.\n:param license_key: License key for osystem/distro_series combo.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/license-keys/"}}, {"anon": null, "name": "VolumeGroupsHandler", "auth": {"name": "VolumeGroupsHandler", "doc": "Manage volume groups on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/volume-groups/", "actions": [{"doc": "List all volume groups belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a volume group belonging to node.\n\n:param name: Name of the volume group.\n:param uuid: (optional) UUID of the volume group.\n:param block_devices: Block devices to add to the volume group.\n:param partitions: Partitions to add to the volume group.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/volume-groups/"}}, {"anon": {"name": "AnonFilesHandler", "doc": "Anonymous file operations.\n\nThis is needed for Juju. The story goes something like this:\n\n- The Juju provider will upload a file using an \"unguessable\" name.\n\n- The name of this file (or its URL) will be shared with all the agents in\n  the environment. They cannot modify the file, but they can access it\n  without credentials.", "uri": "http://localhost:5240/MAAS/api/1.0/files/", "actions": [{"doc": "Get a file from the file storage using its key.\n\n:param key: The exact key of the file you want to get.\n:type key: string\n:return: The file is returned in the response content.", "op": "get_by_key", "restful": false, "method": "GET", "name": "get_by_key"}, {"doc": "Get a named file from the file storage.\n\n:param filename: The exact name of the file you want to get.\n:type filename: string\n:return: The file is returned in the response content.", "op": "get", "restful": false, "method": "GET", "name": "get"}], "params": [], "path": "/MAAS/api/1.0/files/"}, "name": "FilesHandler", "auth": {"name": "FilesHandler", "doc": "Manage the collection of all the files in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/files/", "actions": [{"doc": "List the files from the file storage.\n\nThe returned files are ordered by file name and the content is\nexcluded.\n\n:param prefix: Optional prefix used to filter out the returned files.\n:type prefix: string", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Get a file from the file storage using its key.\n\n:param key: The exact key of the file you want to get.\n:type key: string\n:return: The file is returned in the response content.", "op": "get_by_key", "restful": false, "method": "GET", "name": "get_by_key"}, {"doc": "Get a named file from the file storage.\n\n:param filename: The exact name of the file you want to get.\n:type filename: string\n:return: The file is returned in the response content.", "op": "get", "restful": false, "method": "GET", "name": "get"}, {"doc": "Add a new file to the file storage.\n\n:param filename: The file name to use in the storage.\n:type filename: string\n:param file: Actual file data with content type\n    application/octet-stream\n\nReturns 400 if any of these conditions apply:\n - The filename is missing from the parameters\n - The file data is missing\n - More than one file is supplied", "op": "add", "restful": false, "method": "POST", "name": "add"}], "params": [], "path": "/MAAS/api/1.0/files/"}}, {"anon": null, "name": "SSLKeysHandler", "auth": {"name": "SSLKeysHandler", "doc": "Operations on multiple keys.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sslkeys/", "actions": [{"doc": "List all keys belonging to the requesting user.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Add a new SSL key to the requesting user's account.\n\nThe request payload should contain the SSL key data in form\ndata whose name is \"key\".", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/account/prefs/sslkeys/"}}, {"anon": null, "name": "BootResourceHandler", "auth": {"name": "BootResourceHandler", "doc": "Manage a boot resource.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-resources/{id}/", "actions": [{"doc": "Delete boot resource.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a boot resource.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["id"], "path": "/MAAS/api/1.0/boot-resources/{id}/"}}, {"anon": null, "name": "NodeGroupInterfaceHandler", "auth": {"name": "NodeGroupInterfaceHandler", "doc": "Manage a NodeGroupInterface.\n\nA NodeGroupInterface is identified by the uuid for its NodeGroup, and\nthe name of the network interface it represents: \"eth0\" for example.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/interfaces/{name}/", "actions": [{"doc": "Update a specific NodeGroupInterface.\n\n:param name: Identifying name for the cluster interface.\n:param ip: Static IP of the interface.\n:type ip: unicode (IP Address)\n:param interface: Network interface.\n:type interface: unicode\n:param management: The service(s) MAAS should manage on this interface.\n:type management: Vocabulary `NODEGROUPINTERFACE_MANAGEMENT`\n:param subnet_mask: Subnet mask, e.g. 255.0.0.0.\n:type subnet_mask: unicode (IP Address)\n:param broadcast_ip: Broadcast address for this subnet.\n:type broadcast_ip: unicode (IP Address)\n:param router_ip: Address of default gateway.\n:type router_ip: unicode (IP Address)\n:param ip_range_low: Lowest dynamic IP address to assign to clients.\n:type ip_range_low: unicode (IP Address)\n:param ip_range_high: Highest dynamic IP address to assign to clients.\n:type ip_range_high: unicode (IP Address)\n:param static_ip_range_low: Lowest static IP address to assign to\n    clients.\n:type static_ip_range_low: unicode (IP Address)\n:param static_ip_range_high: Highest static IP address to assign to\n    clients.\n:type static_ip_range_high: unicode (IP Address)\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have permission to access the\ninterface.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific NodeGroupInterface.\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have permission to access the\ninterface.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "List of NodeGroupInterfaces of a NodeGroup.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["uuid", "name"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/interfaces/{name}/"}}, {"anon": null, "name": "NetworksHandler", "auth": {"name": "NetworksHandler", "doc": "Manage the networks.\n\nThis endpoint is deprecated. Use the new 'subnets' endpoint instead.", "uri": "http://localhost:5240/MAAS/api/1.0/networks/", "actions": [{"doc": "List networks.\n\n:param node: Optionally, nodes which must be attached to any returned\n    networks.  If more than one node is given, the result will be\n    restricted to networks that these nodes have in common.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Define a network.\n\nThis endpoint is no longer available. Use the 'subnets' endpoint\ninstead.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/networks/"}}, {"anon": null, "name": "RaidHandler", "auth": {"name": "RaidHandler", "doc": "Manage a specific RAID device on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/raid/{raid_id}/", "actions": [{"doc": "Update RAID on node.\n\n:param name: Name of the RAID.\n:param uuid: UUID of the RAID.\n:param add_block_devices: Block devices to add to the RAID.\n:param remove_block_devices: Block devices to remove from the RAID.\n:param add_spare_devices: Spare block devices to add to the RAID.\n:param remove_spare_devices: Spare block devices to remove\n       from the RAID.\n:param add_partitions: Partitions to add to the RAID.\n:param remove_partitions: Partitions to remove from the RAID.\n:param add_spare_partitions: Spare partitions to add to the RAID.\n:param remove_spare_partitions: Spare partitions to remove from the\n       RAID.\n\nReturns 404 if the node or RAID is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete RAID on node.\n\nReturns 404 if the node or RAID is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read RAID device on node.\n\nReturns 404 if the node or RAID is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["system_id", "raid_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/raid/{raid_id}/"}}, {"anon": null, "name": "BootSourceHandler", "auth": {"name": "BootSourceHandler", "doc": "Manage a boot source.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/{id}/", "actions": [{"doc": "Update a specific boot source.\n\n:param url: The URL of the BootSource.\n:param keyring_filename: The path to the keyring file for this\n    BootSource.\n:param keyring_filename: The GPG keyring for this BootSource,\n    base64-encoded data.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific boot source.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a boot source.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["id"], "path": "/MAAS/api/1.0/boot-sources/{id}/"}}, {"anon": null, "name": "VlanHandler", "auth": {"name": "VlanHandler", "doc": "Manage VLAN on a fabric.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/{fabric_id}/vlans/{vlan_id}/", "actions": [{"doc": "Update VLAN.\n\n:param name: Name of the VLAN.\n:param vid: VLAN ID of the VLAN.\n\nReturns 404 if the fabric or VLAN is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete VLAN on fabric.\n\nReturns 404 if the fabric or VLAN is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read VLAN on fabric.\n\nReturns 404 if the fabric or VLAN is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["fabric_id", "vlan_id"], "path": "/MAAS/api/1.0/fabrics/{fabric_id}/vlans/{vlan_id}/"}}, {"anon": null, "name": "NodeHandler", "auth": {"name": "NodeHandler", "doc": "Manage an individual Node.\n\nThe Node is identified by its system_id.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/", "actions": [{"doc": "Obtain various system details.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{detail_type: xml, ...}`` map, where\n``detail_type`` is something like \"lldp\" or \"lshw\".\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nReturns 404 if the node is not found.", "op": "details", "restful": false, "method": "GET", "name": "details"}, {"doc": "Power up a node.\n\n:param user_data: If present, this blob of user-data to be made\n    available to the nodes through the metadata service.\n:type user_data: base64-encoded unicode\n:param distro_series: If present, this parameter specifies the\n    OS release the node will use.\n:type distro_series: unicode\n:param hwe_kernel: If present, this parameter specified the kernel to\n    be used on the node\n:type hwe_kernel: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nIdeally we'd have MIME multipart and content-transfer-encoding etc.\ndeal with the encapsulation of binary data, but couldn't make it work\nwith the framework in reasonable time so went for a dumb, manual\nencoding instead.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to start the node.\nReturns 503 if the start-up attempted to allocate an IP address,\nand there were no IP addresses available on the relevant cluster\ninterface.", "op": "start", "restful": false, "method": "POST", "name": "start"}, {"doc": "Begin commissioning process for a node.\n\n:param enable_ssh: Whether to enable SSH for the commissioning\n    environment using the user's SSH key(s).\n:type enable_ssh: bool ('0' for False, '1' for True)\n:param block_poweroff: Whether to prevent the power off the node\n    after the commissioning has completed.\n:type block_poweroff: bool ('0' for False, '1' for True)\n:param skip_networking: Whether to skip re-configuring the networking\n    on the node after the commissioning has completed.\n:type skip_networking: bool ('0' for False, '1' for True)\n:param skip_storage: Whether to skip re-configuring the storage\n    on the node after the commissioning has completed.\n:type skip_storage: bool ('0' for False, '1' for True)\n\nA node in the 'ready', 'declared' or 'failed test' state may\ninitiate a commissioning cycle where it is checked out and tested\nin preparation for transitioning to the 'ready' state. If it is\nalready in the 'ready' state this is considered a re-commissioning\nprocess which is useful if commissioning tests were changed after\nit previously commissioned.\n\nReturns 404 if the node is not found.", "op": "commission", "restful": false, "method": "POST", "name": "commission"}, {"doc": "Update a specific Node.\n\n:param hostname: The new hostname for this node.\n:type hostname: unicode\n:param architecture: The new architecture for this node.\n:type architecture: unicode\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this node.\n:type min_hwe_kernel: unicode\n:param power_type: The new power type for this node. If you use the\n    default value, power_parameters will be set to the empty string.\n    Available to admin users.\n    See the `Power types`_ section for a list of the available power\n    types.\n:type power_type: unicode\n:param power_parameters_{param1}: The new value for the 'param1'\n    power parameter.  Note that this is dynamic as the available\n    parameters depend on the selected value of the Node's power_type.\n    For instance, if the power_type is 'ether_wake', the only valid\n    parameter is 'power_address' so one would want to pass 'myaddress'\n    as the value of the 'power_parameters_power_address' parameter.\n    Available to admin users.\n    See the `Power types`_ section for a list of the available power\n    parameters for each power type.\n:type power_parameters_{param1}: unicode\n:param power_parameters_skip_check: Whether or not the new power\n    parameters for this node should be checked against the expected\n    power parameters for the node's power type ('true' or 'false').\n    The default is 'false'.\n:type power_parameters_skip_check: unicode\n:param zone: Name of a valid physical zone in which to place this node\n:type zone: unicode\n:param swap_size: Specifies the size of the swap file, in bytes. Field\n    accept K, M, G and T suffixes for values expressed respectively in\n    kilobytes, megabytes, gigabytes and terabytes.\n:type swap_size: unicode\n:param boot_type: The installation type of the node. 'fastpath': use\n    the default installer. 'di' use the debian installer.\n    Note that using 'di' is now deprecated and will be removed in favor\n    of the default installer in MAAS 1.9.\n:type boot_type: unicode\n\nReturns 404 if the node is node found.\nReturns 403 if the user does not have permission to update the node.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read a specific Node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Release a \"sticky\" IP address from a node's MAC.\n\n:param address: Optional IP address to release. If left unspecified,\n    will release every \"sticky\" IP address associated with the node.\n\nReturns 400 if the specified addresses could not be deallocated\nReturns 404 if the node is not found.\nReturns 409 if the node is in an allocated state.", "op": "release_sticky_ip_address", "restful": false, "method": "POST", "name": "release_sticky_ip_address"}, {"doc": "Mark a node as 'broken'.\n\nIf the node is allocated, release it first.\n\n:param comment: Optional comment for the event log. Will be\n    displayed on the Node as an error description until marked fixed.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to mark the node\nbroken.", "op": "mark_broken", "restful": false, "method": "POST", "name": "mark_broken"}, {"doc": "Release a node.  Opposite of `NodesHandler.acquire`.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to release the node.\nReturns 409 if the node is in a state where it may not be released.", "op": "release", "restful": false, "method": "POST", "name": "release"}, {"doc": "Changes the storage layout on the node.\n\nThis can only be preformed on an allocated node.\n\nNote: This will clear the current storage layout and any extra\nconfiguration and replace it will the new layout.\n\n:param storage_layout: Storage layout for the node. (flat, lvm\n    and bcache)\n\nThe following are optional for all layouts:\n\n:param boot_size: Size of the boot partition.\n:param root_size: Size of the root partition.\n:param root_device: Physical block device to place the root partition.\n\nThe following are optional for LVM:\n\n:param vg_name: Name of created volume group.\n:param lv_name: Name of created logical volume.\n:param lv_size: Size of created logical volume.\n\nThe following are optional for Bcache:\n\n:param cache_device: Physical block device to use as the cache device.\n:param cache_mode: Cache mode for bcache device. (writeback,\n    writethrough, writearound)\n:param cache_size: Size of the cache partition to create on the cache\n    device.\n:param cache_no_part: Don't create a partition on the cache device.\n    Use the entire disk as the cache device.\n\nReturns 400 if the node is currently not allocated.\nReturns 404 if the node could not be found.\nReturns 403 if the user does not have permission to set the storage\nlayout.", "op": "set_storage_layout", "restful": false, "method": "POST", "name": "set_storage_layout"}, {"doc": "Obtain power parameters.\n\nThis method is reserved for admin users and returns a 403 if the\nuser is not one.\n\nThis returns the power parameters, if any, configured for a\nnode. For some types of power control this will include private\ninformation such as passwords and secret keys.\n\nReturns 404 if the node is not found.", "op": "power_parameters", "restful": false, "method": "GET", "name": "power_parameters"}, {"doc": "Mark a broken node as fixed and set its status as 'ready'.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to mark the node\nfixed.", "op": "mark_fixed", "restful": false, "method": "POST", "name": "mark_fixed"}, {"doc": "Query the power state of a node.\n\nSend a request to the node's power controller which asks it about\nthe node's state.  The reply to this could be delayed by up to\n30 seconds while waiting for the power controller to respond.\nUse this method sparingly as it ties up an appserver thread\nwhile waiting.\n\n:param system_id: The node to query.\n:return: a dict whose key is \"state\" with a value of one of\n    'on' or 'off'.\n\nReturns 400 if the node is not installable.\nReturns 404 if the node is not found.\nReturns 503 (with explanatory text) if the power state could not\nbe queried.", "op": "query_power_state", "restful": false, "method": "GET", "name": "query_power_state"}, {"doc": "Delete a specific Node.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to delete the node.\nReturns 204 if the node is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Clear any set default gateways on the node.\n\nThis will clear both IPv4 and IPv6 gateways on the node. This will\ntransition the logic of identifing the best gateway to MAAS. This logic\nis determined based the following criteria:\n\n1. Managed subnets over unmanaged subnets.\n2. Bond interfaces over physical interfaces.\n3. Node's boot interface over all other interfaces except bonds.\n4. Physical interfaces over VLAN interfaces.\n5. Sticky IP links over user reserved IP links.\n6. User reserved IP links over auto IP links.\n\nIf the default gateways need to be specific for this node you can set\nwhich interface and subnet's gateway to use when this node is deployed\nwith the `node-interfaces set-default-gateway` API.", "op": "clear_default_gateways", "restful": false, "method": "POST", "name": "clear_default_gateways"}, {"doc": "Assign a \"sticky\" IP address to a Node's MAC.\n\n:param mac_address: Optional MAC address on the node on which to\n    assign the sticky IP address.  If not passed, defaults to the\n    PXE MAC for the node.\n:param requested_address: Optional IP address to claim.  Must be in\n    the range defined on a cluster interface to which the context\n    MAC is related, or 403 Forbidden is returned.  If the requested\n    address is unavailable for use, 404 Not Found is returned.\n\nA sticky IP is one which stays with the node until the IP is\ndisassociated with the node, or the node is deleted.  It allows\nan admin to give a node a stable IP, since normally an automatic\nIP is allocated to a node only during the time a user has\nacquired and started a node.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is in an allocated state.\nReturns 400 if the mac_address is not found on the node.\nReturns 503 if there are not enough IPs left on the cluster interface\nto which the mac_address is linked.", "op": "claim_sticky_ip_address", "restful": false, "method": "POST", "name": "claim_sticky_ip_address"}, {"doc": "Abort a node's current operation.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nThis currently only supports aborting of the 'Disk Erasing' operation.\n\nReturns 404 if the node could not be found.\nReturns 403 if the user does not have permission to abort the\ncurrent operation.", "op": "abort_operation", "restful": false, "method": "POST", "name": "abort_operation"}, {"doc": "Shut down a node.\n\n:param stop_mode: An optional power off mode. If 'soft',\n    perform a soft power down if the node's power type supports\n    it, otherwise perform a hard power off. For all values other\n    than 'soft', and by default, perform a hard power off. A\n    soft power off generally asks the OS to shutdown the system\n    gracefully before powering off, while a hard power off\n    occurs immediately without any warning to the OS.\n:type stop_mode: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to stop the node.", "op": "stop", "restful": false, "method": "POST", "name": "stop"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/"}}, {"anon": null, "name": "BootSourcesHandler", "auth": {"name": "BootSourcesHandler", "doc": "Manage the collection of boot sources.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/", "actions": [{"doc": "List boot sources.\n\nGet a listing of boot sources.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new boot source.\n\n:param url: The URL of the BootSource.\n:param keyring_filename: The path to the keyring file for\n    this BootSource.\n:param keyring_data: The GPG keyring for this BootSource,\n    base64-encoded.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/boot-sources/"}}, {"anon": null, "name": "RaidsHandler", "auth": {"name": "RaidsHandler", "doc": "Manage all RAID devices on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/raids/", "actions": [{"doc": "List all RAID devices belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Creates a RAID\n\n:param name: Name of the RAID.\n:param uuid: UUID of the RAID.\n:param level: RAID level.\n:param block_devices: Block devices to add to the RAID.\n:param spare_devices: Spare block devices to add to the RAID.\n:param partitions: Partitions to add to the RAID.\n:param spare_partitions: Spare partitions to add to the RAID.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/raids/"}}, {"anon": null, "name": "BootImagesHandler", "auth": {"name": "BootImagesHandler", "doc": "Manage the collection of boot images.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/boot-images/", "actions": [{"doc": "List boot images.\n\nGet a listing of a cluster's boot images.\n\n:param uuid: The UUID of the cluster for which the images\n    should be listed.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["uuid"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/boot-images/"}}, {"anon": null, "name": "UsersHandler", "auth": {"name": "UsersHandler", "doc": "Manage the user accounts of this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/users/", "actions": [{"doc": "List users.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a MAAS user account.\n\nThis is not safe: the password is sent in plaintext.  Avoid it for\nproduction, unless you are confident that you can prevent eavesdroppers\nfrom observing the request.\n\n:param username: Identifier-style username for the new user.\n:type username: unicode\n:param email: Email address for the new user.\n:type email: unicode\n:param password: Password for the new user.\n:type password: unicode\n:param is_superuser: Whether the new user is to be an administrator.\n:type is_superuser: bool ('0' for False, '1' for True)\n\nReturns 400 if any mandatory parameters are missing.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/users/"}}, {"anon": null, "name": "BootSourceSelectionHandler", "auth": {"name": "BootSourceSelectionHandler", "doc": "Manage a boot source selection.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/{id}/", "actions": [{"doc": "Update a specific boot source selection.\n\n:param release: The release for which to import resources.\n:param arches: The list of architectures for which to import resources.\n:param subarches: The list of subarchitectures for which to import\n    resources.\n:param labels: The list of labels for which to import resources.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific boot source.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a boot source selection.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["boot_source_id", "id"], "path": "/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/{id}/"}}, {"anon": {"name": "AnonNodesHandler", "doc": "Anonymous access to Nodes.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/", "actions": [{"doc": "Returns whether or not the given MAC address is registered within\nthis MAAS (and attached to a non-retired node).\n\n:param mac_address: The mac address to be checked.\n:type mac_address: unicode\n:return: 'true' or 'false'.\n:rtype: unicode\n\nReturns 400 if any mandatory parameters are missing.", "op": "is_registered", "restful": false, "method": "GET", "name": "is_registered"}, {"doc": "Accept a node's enlistment: not allowed to anonymous users.\n\nAlways returns 401.", "op": "accept", "restful": false, "method": "POST", "name": "accept"}, {"doc": "Create a new Node.\n\nAdding a server to a MAAS puts it on a path that will wipe its disks\nand re-install its operating system, in the event that it PXE boots.\nIn anonymous enlistment (and when the enlistment is done by a\nnon-admin), the node is held in the \"New\" state for approval by a MAAS\nadmin.\n\nThe minimum data required is:\narchitecture=<arch string> (e.g. \"i386/generic\")\nmac_addresses=<value> (e.g. \"aa:bb:cc:dd:ee:ff\")\nautodetect_nodegroup=True\n\n:param architecture: A string containing the architecture type of\n    the node. (For example, \"i386\", or \"amd64\".) To determine the\n    supported architectures, use the boot-resources endpoint.\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this node.\n:param subarchitecture: A string containing the subarchitecture type\n    of the node. (For example, \"generic\" or \"hwe-t\".) To determine\n    the supported subarchitectures, use the boot-resources endpoint.\n:param mac_addresses: One or more MAC addresses for the node. To\n    specify more than one MAC address, the parameter must be specified\n    twice. (such as \"nodes new mac_addresses=01:02:03:04:05:06\n    mac_addresses=02:03:04:05:06:07\")\n:param hostname: A hostname. If not given, one will be generated.\n:param power_type: A power management type, if applicable (e.g.\n    \"virsh\", \"ipmi\").\n:param autodetect_nodegroup: (boolean) Whether or not to attempt\n    nodegroup detection for this node. The nodegroup is determined\n    based on the requestor's IP address range. (if the API request\n    comes from an IP range within a known nodegroup, that nodegroup\n    will be used.)\n:param nodegroup: The id of the nodegroup this node belongs to.\n:param boot_type: The installation type of the node. 'fastpath': use\n    the default installer. 'di' use the debian installer.\n    Note that using 'di' is now deprecated and will be removed in favor\n    of the default installer in MAAS 1.9.\n:type boot_type: unicode", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/nodes/"}, "name": "NodesHandler", "auth": {"name": "NodesHandler", "doc": "Manage the collection of all the nodes in the MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/", "actions": [{"doc": "Release multiple nodes.\n\nThis places the nodes back into the pool, ready to be reallocated.\n\n:param nodes: system_ids of the nodes which are to be released.\n   (An empty list is acceptable).\n:param comment: Optional comment for the event log.\n:type comment: unicode\n:return: The system_ids of any nodes that have their status\n    changed by this call. Thus, nodes that were already released\n    are excluded from the result.\n\nReturns 400 if any of the nodes cannot be found.\nReturns 403 if the user does not have permission to release any of\nthe nodes.\nReturns a 409 if any of the nodes could not be released due to their\ncurrent state.", "op": "release", "restful": false, "method": "POST", "name": "release"}, {"doc": "Accept declared nodes into the MAAS.\n\nNodes can be enlisted in the MAAS anonymously or by non-admin users,\nas opposed to by an admin.  These nodes are held in the New\nstate; a MAAS admin must first verify the authenticity of these\nenlistments, and accept them.\n\nEnlistments can be accepted en masse, by passing multiple nodes to\nthis call.  Accepting an already accepted node is not an error, but\naccepting one that is already allocated, broken, etc. is.\n\n:param nodes: system_ids of the nodes whose enlistment is to be\n    accepted.  (An empty list is acceptable).\n:return: The system_ids of any nodes that have their status changed\n    by this call.  Thus, nodes that were already accepted are\n    excluded from the result.\n\nReturns 400 if any of the nodes do not exist.\nReturns 403 if the user is not an admin.", "op": "accept", "restful": false, "method": "POST", "name": "accept"}, {"doc": "Check all commissioning nodes to see if they are taking too long.\n\nAnything that has been commissioning for longer than\nsettings.COMMISSIONING_TIMEOUT is moved into the\nFAILED_COMMISSIONING status.", "op": "check_commissioning", "restful": false, "method": "POST", "name": "check_commissioning"}, {"doc": "List all nodes.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Retrieve power parameters for multiple nodes.\n\n:param id: An optional list of system ids.  Only nodes with\n    matching system ids will be returned.\n:type id: iterable\n\n:return: A dictionary of power parameters, keyed by node system_id.\n\nRaises 403 if the user is not an admin.", "op": "power_parameters", "restful": false, "method": "GET", "name": "power_parameters"}, {"doc": "Accept all declared nodes into the MAAS.\n\nNodes can be enlisted in the MAAS anonymously or by non-admin users,\nas opposed to by an admin.  These nodes are held in the New\nstate; a MAAS admin must first verify the authenticity of these\nenlistments, and accept them.\n\n:return: Representations of any nodes that have their status changed\n    by this call.  Thus, nodes that were already accepted are excluded\n    from the result.", "op": "accept_all", "restful": false, "method": "POST", "name": "accept_all"}, {"doc": "Acquire an available node for deployment.\n\nConstraints parameters can be used to acquire a node that possesses\ncertain characteristics.  All the constraints are optional and when\nmultiple constraints are provided, they are combined using 'AND'\nsemantics.\n\n:param name: Hostname of the returned node.\n:type name: unicode\n:param arch: Architecture of the returned node (e.g. 'i386/generic',\n    'amd64', 'armhf/highbank', etc.).\n:type arch: unicode\n:param cpu_count: The minium number of CPUs the returned node must\n    have.\n:type cpu_count: int\n:param mem: The minimum amount of memory (expressed in MB) the\n     returned node must have.\n:type mem: float\n:param tags: List of tags the returned node must have.\n:type tags: list of unicodes\n:param not_tags: List of tags the acquired node must not have.\n:type tags: List of unicodes.\n:param connected_to: List of routers' MAC addresses the returned\n    node must be connected to.\n:type connected_to: unicode or list of unicodes\n:param networks: List of networks (defined in MAAS) to which the node\n    must be attached.  A network can be identified by the name\n    assigned to it in MAAS; or by an `ip:` prefix followed by any IP\n    address that falls within the network; or a `vlan:` prefix\n    followed by a numeric VLAN tag, e.g. `vlan:23` for VLAN number 23.\n    Valid VLAN tags must be in the range of 1 to 4095 inclusive.\n:type networks: list of unicodes\n:param not_networks: List of networks (defined in MAAS) to which the\n    node must not be attached.  The returned noded won't be attached to\n    any of the specified networks.  A network can be identified by the\n    name assigned to it in MAAS; or by an `ip:` prefix followed by any\n    IP address that falls within the network; or a `vlan:` prefix\n    followed by a numeric VLAN tag, e.g. `vlan:23` for VLAN number 23.\n    Valid VLAN tags must be in the range of 1 to 4095 inclusive.\n:type not_networks: list of unicodes\n:param not_connected_to: List of routers' MAC Addresses the returned\n    node must not be connected to.\n:type connected_to: list of unicodes\n:param zone: An optional name for a physical zone the acquired\n    node should be located in.\n:type zone: unicode\n:type not_in_zone: Optional list of physical zones from which the\n    node should not be acquired.\n:type not_in_zone: List of unicodes.\n:param agent_name: An optional agent name to attach to the\n    acquired node.\n:type agent_name: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 409 if a suitable node matching the constraints could not be\nfound.", "op": "acquire", "restful": false, "method": "POST", "name": "acquire"}, {"doc": "Retrieve deployment status for multiple nodes.\n\n:param nodes: Mandatory list of system IDs for nodes whose status\n    you wish to check.\n\nReturns 400 if mandatory parameters are missing.\nReturns 403 if the user has no permission to view any of the nodes.", "op": "deployment_status", "restful": false, "method": "GET", "name": "deployment_status"}, {"doc": "Assign multiple nodes to a physical zone at once.\n\n:param zone: Zone name.  If omitted, the zone is \"none\" and the nodes\n    will be taken out of their physical zones.\n:param nodes: system_ids of the nodes whose zones are to be set.\n   (An empty list is acceptable).\n\nRaises 403 if the user is not an admin.", "op": "set_zone", "restful": false, "method": "POST", "name": "set_zone"}, {"doc": "Fetch Nodes that were allocated to the User/oauth token.", "op": "list_allocated", "restful": false, "method": "GET", "name": "list_allocated"}, {"doc": "Create a new Node.\n\nAdding a server to a MAAS puts it on a path that will wipe its disks\nand re-install its operating system, in the event that it PXE boots.\nIn anonymous enlistment (and when the enlistment is done by a\nnon-admin), the node is held in the \"New\" state for approval by a MAAS\nadmin.\n\nThe minimum data required is:\narchitecture=<arch string> (e.g. \"i386/generic\")\nmac_addresses=<value> (e.g. \"aa:bb:cc:dd:ee:ff\")\nautodetect_nodegroup=True\n\n:param architecture: A string containing the architecture type of\n    the node. (For example, \"i386\", or \"amd64\".) To determine the\n    supported architectures, use the boot-resources endpoint.\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this node.\n:param subarchitecture: A string containing the subarchitecture type\n    of the node. (For example, \"generic\" or \"hwe-t\".) To determine\n    the supported subarchitectures, use the boot-resources endpoint.\n:param mac_addresses: One or more MAC addresses for the node. To\n    specify more than one MAC address, the parameter must be specified\n    twice. (such as \"nodes new mac_addresses=01:02:03:04:05:06\n    mac_addresses=02:03:04:05:06:07\")\n:param hostname: A hostname. If not given, one will be generated.\n:param power_type: A power management type, if applicable (e.g.\n    \"virsh\", \"ipmi\").\n:param autodetect_nodegroup: (boolean) Whether or not to attempt\n    nodegroup detection for this node. The nodegroup is determined\n    based on the requestor's IP address range. (if the API request\n    comes from an IP range within a known nodegroup, that nodegroup\n    will be used.)\n:param nodegroup: The id of the nodegroup this node belongs to.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/nodes/"}}, {"anon": null, "name": "FanNetworkHandler", "auth": {"name": "FanNetworkHandler", "doc": "Manage Fan Network.", "uri": "http://localhost:5240/MAAS/api/1.0/fannetworks/{fannetwork_id}/", "actions": [{"doc": "Update fannetwork.\n\n:param name: Name of the fannetwork.\n:param overlay: Overlay network\n:param underlay: Underlay network\n:param dhcp: confiugre dhcp server for overlay net\n:param host_reserve: number of IP addresses to reserve for host\n:param bridge: override bridge name\n:param off: put this int he config, but disable it.\n\nReturns 404 if the fannetwork is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete fannetwork.\n\nReturns 404 if the fannetwork is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read fannetwork.\n\nReturns 404 if the fannetwork is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["fannetwork_id"], "path": "/MAAS/api/1.0/fannetworks/{fannetwork_id}/"}}, {"anon": null, "name": "SpaceHandler", "auth": {"name": "SpaceHandler", "doc": "Manage space.", "uri": "http://localhost:5240/MAAS/api/1.0/spaces/{space_id}/", "actions": [{"doc": "Update space.\n\n:param name: Name of the space.\n\nReturns 404 if the space is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete subnet.\n\nReturns 404 if the space is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read space.\n\nReturns 404 if the space is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["space_id"], "path": "/MAAS/api/1.0/spaces/{space_id}/"}}, {"anon": null, "name": "NodeResultsHandler", "auth": {"name": "NodeResultsHandler", "doc": "Read the collection of NodeResult in the MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/installation-results/", "actions": [{"doc": "List NodeResult visible to the user, optionally filtered.\n\n:param system_id: An optional list of system ids.  Only the\n    results related to the nodes with these system ids\n    will be returned.\n:type system_id: iterable\n:param name: An optional list of names.  Only the results\n    with the specified names will be returned.\n:type name: iterable\n:param result_type: An optional result_type.  Only the results\n    with the specified result_type will be returned.\n:type name: iterable", "op": "list", "restful": false, "method": "GET", "name": "list"}], "params": [], "path": "/MAAS/api/1.0/installation-results/"}}, {"anon": null, "name": "BcacheHandler", "auth": {"name": "BcacheHandler", "doc": "Manage bcache device on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcache/{bcache_id}/", "actions": [{"doc": "Delete bcache on node.\n\n:param name: Name of the Bcache.\n:param uuid: UUID of the Bcache.\n:param cache_set: Cache set to replace current one.\n:param backing_device: Backing block device to replace current one.\n:param backing_partition: Backing partition to replace current one.\n:param cache_mode: Cache mode (writeback, writethrough, writearound).\n\nSpecifying both a device and a partition for a given role (cache or\nbacking) is not allowed.\n\nReturns 404 if the node or the bcache is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete bcache on node.\n\nReturns 404 if the node or bcache is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read bcache device on node.\n\nReturns 404 if the node or bcache is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["system_id", "bcache_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcache/{bcache_id}/"}}, {"anon": null, "name": "BootResourcesHandler", "auth": {"name": "BootResourcesHandler", "doc": "Manage the boot resources.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-resources/", "actions": [{"doc": "List all boot resources.\n\n:param type: Type of boot resources to list. Default: all", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Uploads a new boot resource.\n\n:param name: Name of the boot resource.\n:param title: Title for the boot resource.\n:param architecture: Architecture the boot resource supports.\n:param filetype: Filetype for uploaded content. (Default: tgz)\n:param content: Image content. Note: this is not a normal parameter,\n    but a file upload.", "op": null, "restful": true, "method": "POST", "name": "create"}, {"doc": "Import the boot resources.", "op": "import", "restful": false, "method": "POST", "name": "import"}], "params": [], "path": "/MAAS/api/1.0/boot-resources/"}}, {"anon": null, "name": "ZoneHandler", "auth": {"name": "ZoneHandler", "doc": "Manage a physical zone.\n\nAny node is in a physical zone, or \"zone\" for short.  The meaning of a\nphysical zone is up to you: it could identify e.g. a server rack, a\nnetwork, or a data centre.  Users can then allocate nodes from specific\nphysical zones, to suit their redundancy or performance requirements.\n\nThis functionality is only available to administrators.  Other users can\nview physical zones, but not modify them.", "uri": "http://localhost:5240/MAAS/api/1.0/zones/{name}/", "actions": [{"doc": "PUT request.  Update zone.\n\nReturns 404 if the zone is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "DELETE request.  Delete zone.\n\nReturns 404 if the zone is not found.\nReturns 204 if the zone is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET request.  Return zone.\n\nReturns 404 if the zone is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["name"], "path": "/MAAS/api/1.0/zones/{name}/"}}, {"anon": null, "name": "TagsHandler", "auth": {"name": "TagsHandler", "doc": "Manage the collection of all the Tags in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/tags/", "actions": [{"doc": "List Tags.\n\nGet a listing of all tags that are currently defined.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Create a new Tag.\n\n:param name: The name of the Tag to be created. This should be a short\n    name, and will be used in the URL of the tag.\n:param comment: A long form description of what the tag is meant for.\n    It is meant as a human readable description of the tag.\n:param definition: An XPATH query that will be evaluated against the\n    hardware_details stored for all nodes (output of `lshw -xml`).\n:param kernel_opts: Can be None. If set, nodes associated with this tag\n    will add this string to their kernel options when booting. The\n    value overrides the global 'kernel_opts' setting. If more than one\n    tag is associated with a node, the one with the lowest alphabetical\n    name will be picked (eg 01-my-tag will be taken over 99-tag-name).\n\nReturns 401 if the user is not an admin.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/tags/"}}, {"anon": null, "name": "DeviceHandler", "auth": {"name": "DeviceHandler", "doc": "Manage an individual device.\n\nThe device is identified by its system_id.", "uri": "http://localhost:5240/MAAS/api/1.0/devices/{system_id}/", "actions": [{"doc": "Update a specific device.\n\n:param hostname: The new hostname for this device.\n:param parent: Optional system_id to indicate this device's parent.\n    If the parent is already set and this parameter is omitted,\n    the parent will be unchanged.\n:type hostname: unicode\n\nReturns 404 if the device is not found.\nReturns 403 if the user does not have permission to update the device.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific Device.\n\nReturns 404 if the device is not found.\nReturns 403 if the user does not have permission to delete the device.\nReturns 204 if the device is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a specific device.\n\nReturns 404 if the device is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Release a \"sticky\" IP address from a device's MAC.\n\n:param address: Optional IP address to release. If left unspecified,\n    will release every \"sticky\" IP address associated with the device.\n\nReturns 400 if the specified addresses could not be deallocated\nReturns 404 if the device is not found.", "op": "release_sticky_ip_address", "restful": false, "method": "POST", "name": "release_sticky_ip_address"}, {"doc": "Assign a \"sticky\" IP address to a device's MAC.\n\n:param mac_address: Optional MAC address on the device on which to\n    assign the sticky IP address.  If not passed, defaults to the\n    primary MAC for the device.\n:param requested_address: Optional IP address to claim.  If this\n    isn't passed, this method will draw an IP address from the static\n    range of the cluster interface this MAC is related to.\n    If passed, this method lets you associate any IP address\n    with a MAC address if the MAC isn't related to a cluster interface.\n\nReturns 404 if the device is not found.\nReturns 400 if the mac_address is not found on the device.\nReturns 503 if there are not enough IPs left on the cluster interface\nto which the mac_address is linked.\nReturns 503 if the requested_address falls in a dynamic range.\nReturns 503 if the requested_address falls in a dynamic range.\nReturns 503 if the requested_address is already allocated.", "op": "claim_sticky_ip_address", "restful": false, "method": "POST", "name": "claim_sticky_ip_address"}], "params": ["system_id"], "path": "/MAAS/api/1.0/devices/{system_id}/"}}, {"anon": null, "name": "BcachesHandler", "auth": {"name": "BcachesHandler", "doc": "Manage bcache devices on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcaches/", "actions": [{"doc": "List all bcache devices belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Creates a Bcache.\n\n:param name: Name of the Bcache.\n:param uuid: UUID of the Bcache.\n:param cache_set: Cache set.\n:param backing_device: Backing block device.\n:param backing_partition: Backing partition.\n:param cache_mode: Cache mode (WRITEBACK, WRITETHROUGH, WRITEAROUND).\n\nSpecifying both a device and a partition for a given role (cache or\nbacking) is not allowed.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcaches/"}}, {"anon": null, "name": "FileHandler", "auth": {"name": "FileHandler", "doc": "Manage a FileStorage object.\n\nThe file is identified by its filename and owner.", "uri": "http://localhost:5240/MAAS/api/1.0/files/{filename}/", "actions": [{"doc": "Delete a FileStorage object.", "op": "delete", "restful": false, "method": "POST", "name": "delete"}, {"doc": "Delete a FileStorage object.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET a FileStorage object as a json object.\n\nThe 'content' of the file is base64-encoded.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["filename"], "path": "/MAAS/api/1.0/files/{filename}/"}}, {"anon": null, "name": "CommissioningScriptsHandler", "auth": {"name": "CommissioningScriptsHandler", "doc": "Manage custom commissioning scripts.\n\nThis functionality is only available to administrators.", "uri": "http://localhost:5240/MAAS/api/1.0/commissioning-scripts/", "actions": [{"doc": "List commissioning scripts.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new commissioning script.\n\nEach commissioning script is identified by a unique name.\n\nBy convention the name should consist of a two-digit number, a dash,\nand a brief descriptive identifier consisting only of ASCII\ncharacters.  You don't need to follow this convention, but not doing\nso opens you up to risks w.r.t. encoding and ordering.  The name must\nnot contain any whitespace, quotes, or apostrophes.\n\nA commissioning node will run each of the scripts in lexicographical\norder.  There are no promises about how non-ASCII characters are\nsorted, or even how upper-case letters are sorted relative to\nlower-case letters.  So where ordering matters, use unique numbers.\n\nScripts built into MAAS will have names starting with \"00-maas\" or\n\"99-maas\" to ensure that they run first or last, respectively.\n\nUsually a commissioning script will be just that, a script.  Ideally a\nscript should be ASCII text to avoid any confusion over encoding.  But\nin some cases a commissioning script might consist of a binary tool\nprovided by a hardware vendor.  Either way, the script gets passed to\nthe commissioning node in the exact form in which it was uploaded.\n\n:param name: Unique identifying name for the script.  Names should\n    follow the pattern of \"25-burn-in-hard-disk\" (all ASCII, and with\n    numbers greater than zero, and generally no \"weird\" characters).\n:param content: A script file, to be uploaded in binary form.  Note:\n    this is not a normal parameter, but a file upload.  Its filename\n    is ignored; MAAS will know it by the name you pass to the request.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/commissioning-scripts/"}}, {"anon": null, "name": "ZonesHandler", "auth": {"name": "ZonesHandler", "doc": "Manage physical zones.", "uri": "http://localhost:5240/MAAS/api/1.0/zones/", "actions": [{"doc": "List zones.\n\nGet a listing of all the physical zones.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new physical zone.\n\n:param name: Identifier-style name for the new zone.\n:type name: unicode\n:param description: Free-form description of the new zone.\n:type description: unicode", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/zones/"}}, {"anon": null, "name": "FabricsHandler", "auth": {"name": "FabricsHandler", "doc": "Manage fabrics.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/", "actions": [{"doc": "List all fabrics.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a fabric.\n\n:param name: Name of the fabric.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/fabrics/"}}, {"anon": null, "name": "DevicesHandler", "auth": {"name": "DevicesHandler", "doc": "Manage the collection of all the devices in the MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/devices/", "actions": [{"doc": "List devices visible to the user, optionally filtered by criteria.\n\n:param hostname: An optional list of hostnames.  Only devices with\n    matching hostnames will be returned.\n:type hostname: iterable\n:param mac_address: An optional list of MAC addresses.  Only\n    devices with matching MAC addresses will be returned.\n:type mac_address: iterable\n:param id: An optional list of system ids.  Only devices with\n    matching system ids will be returned.\n:type id: iterable", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Create a new device.\n\n:param mac_addresses: One or more MAC addresses for the device.\n:param hostname: A hostname. If not given, one will be generated.\n:param parent: The system id of the parent.  Optional.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/devices/"}}, {"anon": null, "name": "TagHandler", "auth": {"name": "TagHandler", "doc": "Manage a Tag.\n\nTags are properties that can be associated with a Node and serve as\ncriteria for selecting and allocating nodes.\n\nA Tag is identified by its name.", "uri": "http://localhost:5240/MAAS/api/1.0/tags/{name}/", "actions": [{"doc": "Delete a specific Tag.\n\nReturns 404 if the tag is not found.\nReturns 204 if the tag is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Get the list of nodes that have this tag.\n\nReturns 404 if the tag is not found.", "op": "nodes", "restful": false, "method": "GET", "name": "nodes"}, {"doc": "Manually trigger a rebuild the tag <=> node mapping.\n\nThis is considered a maintenance operation, which should normally not\nbe necessary. Adding nodes or updating a tag's definition should\nautomatically trigger the appropriate changes.\n\nReturns 404 if the tag is not found.", "op": "rebuild", "restful": false, "method": "POST", "name": "rebuild"}, {"doc": "Update a specific Tag.\n\n:param name: The name of the Tag to be created. This should be a short\n    name, and will be used in the URL of the tag.\n:param comment: A long form description of what the tag is meant for.\n    It is meant as a human readable description of the tag.\n:param definition: An XPATH query that will be evaluated against the\n    hardware_details stored for all nodes (output of `lshw -xml`).\n\nReturns 404 if the tag is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read a specific Tag.\n\nReturns 404 if the tag is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Add or remove nodes being associated with this tag.\n\n:param add: system_ids of nodes to add to this tag.\n:param remove: system_ids of nodes to remove from this tag.\n:param definition: (optional) If supplied, the definition will be\n    validated against the current definition of the tag. If the value\n    does not match, then the update will be dropped (assuming this was\n    just a case of a worker being out-of-date)\n:param nodegroup: A uuid of a nodegroup being processed. This value is\n    optional. If not supplied, the requester must be a superuser. If\n    supplied, then the requester must be the worker associated with\n    that nodegroup, and only nodes that are part of that nodegroup can\n    be updated.\n\nReturns 404 if the tag is not found.\nReturns 401 if the user does not have permission to update the nodes.\nReturns 409 if 'definition' doesn't match the current definition.", "op": "update_nodes", "restful": false, "method": "POST", "name": "update_nodes"}], "params": ["name"], "path": "/MAAS/api/1.0/tags/{name}/"}}], "handlers": [{"name": "VersionHandler", "doc": "Information about this MAAS instance.\n\nThis returns a JSON dictionary with information about this\nMAAS instance::\n\n    {\n        'version': '1.8.0',\n        'subversion': 'alpha10+bzr3750',\n        'capabilities': ['capability1', 'capability2', ...]\n    }", "uri": "http://localhost:5240/MAAS/api/1.0/version/", "actions": [{"doc": "Version and capabilities of this MAAS instance.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": [], "path": "/MAAS/api/1.0/version/"}, {"name": "AnonNodeGroupsHandler", "doc": "Anonymous access to NodeGroups.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/", "actions": [{"doc": "List of node groups.", "op": "list", "restful": false, "method": "GET", "name": "list"}], "params": [], "path": "/MAAS/api/1.0/nodegroups/"}, {"name": "AnonFilesHandler", "doc": "Anonymous file operations.\n\nThis is needed for Juju. The story goes something like this:\n\n- The Juju provider will upload a file using an \"unguessable\" name.\n\n- The name of this file (or its URL) will be shared with all the agents in\n  the environment. They cannot modify the file, but they can access it\n  without credentials.", "uri": "http://localhost:5240/MAAS/api/1.0/files/", "actions": [{"doc": "Get a file from the file storage using its key.\n\n:param key: The exact key of the file you want to get.\n:type key: string\n:return: The file is returned in the response content.", "op": "get_by_key", "restful": false, "method": "GET", "name": "get_by_key"}, {"doc": "Get a named file from the file storage.\n\n:param filename: The exact name of the file you want to get.\n:type filename: string\n:return: The file is returned in the response content.", "op": "get", "restful": false, "method": "GET", "name": "get"}], "params": [], "path": "/MAAS/api/1.0/files/"}, {"name": "AnonNodesHandler", "doc": "Anonymous access to Nodes.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/", "actions": [{"doc": "Returns whether or not the given MAC address is registered within\nthis MAAS (and attached to a non-retired node).\n\n:param mac_address: The mac address to be checked.\n:type mac_address: unicode\n:return: 'true' or 'false'.\n:rtype: unicode\n\nReturns 400 if any mandatory parameters are missing.", "op": "is_registered", "restful": false, "method": "GET", "name": "is_registered"}, {"doc": "Accept a node's enlistment: not allowed to anonymous users.\n\nAlways returns 401.", "op": "accept", "restful": false, "method": "POST", "name": "accept"}, {"doc": "Create a new Node.\n\nAdding a server to a MAAS puts it on a path that will wipe its disks\nand re-install its operating system, in the event that it PXE boots.\nIn anonymous enlistment (and when the enlistment is done by a\nnon-admin), the node is held in the \"New\" state for approval by a MAAS\nadmin.\n\nThe minimum data required is:\narchitecture=<arch string> (e.g. \"i386/generic\")\nmac_addresses=<value> (e.g. \"aa:bb:cc:dd:ee:ff\")\nautodetect_nodegroup=True\n\n:param architecture: A string containing the architecture type of\n    the node. (For example, \"i386\", or \"amd64\".) To determine the\n    supported architectures, use the boot-resources endpoint.\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this node.\n:param subarchitecture: A string containing the subarchitecture type\n    of the node. (For example, \"generic\" or \"hwe-t\".) To determine\n    the supported subarchitectures, use the boot-resources endpoint.\n:param mac_addresses: One or more MAC addresses for the node. To\n    specify more than one MAC address, the parameter must be specified\n    twice. (such as \"nodes new mac_addresses=01:02:03:04:05:06\n    mac_addresses=02:03:04:05:06:07\")\n:param hostname: A hostname. If not given, one will be generated.\n:param power_type: A power management type, if applicable (e.g.\n    \"virsh\", \"ipmi\").\n:param autodetect_nodegroup: (boolean) Whether or not to attempt\n    nodegroup detection for this node. The nodegroup is determined\n    based on the requestor's IP address range. (if the API request\n    comes from an IP range within a known nodegroup, that nodegroup\n    will be used.)\n:param nodegroup: The id of the nodegroup this node belongs to.\n:param boot_type: The installation type of the node. 'fastpath': use\n    the default installer. 'di' use the debian installer.\n    Note that using 'di' is now deprecated and will be removed in favor\n    of the default installer in MAAS 1.9.\n:type boot_type: unicode", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/nodes/"}, {"name": "MaasHandler", "doc": "Manage the MAAS server.", "uri": "http://localhost:5240/MAAS/api/1.0/maas/", "actions": [{"doc": "Set a config value.\n\n:param name: The name of the config item to be set.\n:type name: unicode\n:param value: The value of the config item to be set.\n:type value: json object\n\nAvailable configuration items:\n- upstream_dns: Upstream DNS used to resolve domains not managed by this MAAS (space-separated IP addresses).         Only used when MAAS is running its own DNS server. This value is used as the value of 'forwarders' in the DNS server config.\n- default_storage_layout: Default storage layout.         Storage layout that is applied to a node when it is acquired.        Available choices are: 'lvm' (LVM layout), 'flat' (Flat layout), 'bcache' (Bcache layout).\n- default_osystem: Default operating system used for deployment.\n- ports_archive: Ports archive.         Archive used by nodes to retrieve packages for non-Intel architectures. E.g. http://ports.ubuntu.com/ubuntu-ports.\n- http_proxy: Proxy for HTTP and HTTPS traffic.         This is used by the cluster and region controllers for downloading PXE boot images and other provisioning-related resources. This will also be passed onto provisioned nodes instead of the default proxy (the region controller proxy).\n- boot_images_auto_import: Automatically import/refresh the boot images every 60 minutes.\n- enable_third_party_drivers: Enable the installation of proprietary drivers (i.e. HPVSA).\n- kernel_opts: Boot parameters to pass to the kernel by default.\n- main_archive: Main archive.         Archive used by nodes to retrieve packages for Intel architectures. E.g. http://archive.ubuntu.com/ubuntu.\n- maas_name: MAAS name.\n- curtin_verbose: Run the fast-path installer with higher verbosity. This provides more detail in the installation logs..\n- dnssec_validation: Enable DNSSEC validation of upstream zones.         Only used when MAAS is running its own DNS server. This value is used as the value of 'dnssec_validation' in the DNS server config.\n- commissioning_distro_series: Default Ubuntu release used for commissioning.\n- windows_kms_host: Windows KMS activation host.         FQDN or IP address of the host that provides the KMS Windows activation service. (Only needed for Windows deployments using KMS activation.)\n- enable_disk_erasing_on_release: Erase nodes' disks prior to releasing..\n- default_distro_series: Default OS release used for deployment.\n- ntp_server: Address of NTP server for nodes.         NTP server address passed to nodes via a DHCP response. e.g. ntp.ubuntu.com", "op": "set_config", "restful": false, "method": "POST", "name": "set_config"}, {"doc": "Get a config value.\n\n:param name: The name of the config item to be retrieved.\n:type name: unicode\n\nAvailable configuration items:\n- upstream_dns: Upstream DNS used to resolve domains not managed by this MAAS (space-separated IP addresses).         Only used when MAAS is running its own DNS server. This value is used as the value of 'forwarders' in the DNS server config.\n- default_storage_layout: Default storage layout.         Storage layout that is applied to a node when it is acquired.        Available choices are: 'lvm' (LVM layout), 'flat' (Flat layout), 'bcache' (Bcache layout).\n- default_osystem: Default operating system used for deployment.\n- ports_archive: Ports archive.         Archive used by nodes to retrieve packages for non-Intel architectures. E.g. http://ports.ubuntu.com/ubuntu-ports.\n- http_proxy: Proxy for HTTP and HTTPS traffic.         This is used by the cluster and region controllers for downloading PXE boot images and other provisioning-related resources. This will also be passed onto provisioned nodes instead of the default proxy (the region controller proxy).\n- boot_images_auto_import: Automatically import/refresh the boot images every 60 minutes.\n- enable_third_party_drivers: Enable the installation of proprietary drivers (i.e. HPVSA).\n- kernel_opts: Boot parameters to pass to the kernel by default.\n- main_archive: Main archive.         Archive used by nodes to retrieve packages for Intel architectures. E.g. http://archive.ubuntu.com/ubuntu.\n- maas_name: MAAS name.\n- curtin_verbose: Run the fast-path installer with higher verbosity. This provides more detail in the installation logs..\n- dnssec_validation: Enable DNSSEC validation of upstream zones.         Only used when MAAS is running its own DNS server. This value is used as the value of 'dnssec_validation' in the DNS server config.\n- commissioning_distro_series: Default Ubuntu release used for commissioning.\n- windows_kms_host: Windows KMS activation host.         FQDN or IP address of the host that provides the KMS Windows activation service. (Only needed for Windows deployments using KMS activation.)\n- enable_disk_erasing_on_release: Erase nodes' disks prior to releasing..\n- default_distro_series: Default OS release used for deployment.\n- ntp_server: Address of NTP server for nodes.         NTP server address passed to nodes via a DHCP response. e.g. ntp.ubuntu.com", "op": "get_config", "restful": false, "method": "GET", "name": "get_config"}], "params": [], "path": "/MAAS/api/1.0/maas/"}, {"name": "BcacheCacheSetHandler", "doc": "Manage bcache cache set on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcache-cache-set/{cache_set_id}/", "actions": [{"doc": "Delete bcache on node.\n\n:param cache_device: Cache block device to replace current one.\n:param cache_partition: Cache partition to replace current one.\n\nSpecifying both a cache_device and a cache_partition is not allowed.\n\nReturns 404 if the node or the cache set is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete cache set on node.\n\nReturns 400 if the cache set is in use.\nReturns 404 if the node or cache set is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read bcache cache set on node.\n\nReturns 404 if the node or cache set is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["system_id", "cache_set_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcache-cache-set/{cache_set_id}/"}, {"name": "IPAddressesHandler", "doc": "Manage IP addresses allocated by MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/ipaddresses/", "actions": [{"doc": "Reserve an IP address for use outside of MAAS.\n\nReturns an IP adddress, which MAAS will not allow any of its known\ndevices and Nodes to use; it is free for use by the requesting user\nuntil released by the user.\n\nThe user may supply either a range matching the subnet of an\nexisting cluster interface, or a specific IP address within the\nstatic IP address range on a cluster interface.\n\n:param network: CIDR representation of the network on which the IP\n    reservation is required. e.g. 10.1.2.0/24\n:param requested_address: the requested address, which must be within\n    a static IP address range managed by MAAS.\n:param hostname: the hostname to use for the specified IP address\n:type network: unicode\n\nReturns 400 if there is no network in MAAS matching the provided one,\nor a requested_address is supplied, but a corresponding network\ncould not be found.\nReturns 503 if there are no more IP addresses available.", "op": "reserve", "restful": false, "method": "POST", "name": "reserve"}, {"doc": "Release an IP address that was previously reserved by the user.\n\n:param ip: The IP address to release.\n:type ip: unicode\n\nReturns 404 if the provided IP address is not found.", "op": "release", "restful": false, "method": "POST", "name": "release"}, {"doc": "List IPAddresses.\n\nGet a listing of all IPAddresses allocated to the requesting user.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": [], "path": "/MAAS/api/1.0/ipaddresses/"}, {"name": "NetworkHandler", "doc": "Manage a network.\n\nThis endpoint is deprecated. Use the new 'subnet' endpoint instead.", "uri": "http://localhost:5240/MAAS/api/1.0/networks/{name}/", "actions": [{"doc": "Delete network definition.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Disconnect the given MAC addresses from this network.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.", "op": "disconnect_macs", "restful": false, "method": "POST", "name": "disconnect_macs"}, {"doc": "Returns the list of MAC addresses connected to this network.\n\nOnly MAC addresses for nodes visible to the requesting user are\nreturned.", "op": "list_connected_macs", "restful": false, "method": "GET", "name": "list_connected_macs"}, {"doc": "Connect the given MAC addresses to this network.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.", "op": "connect_macs", "restful": false, "method": "POST", "name": "connect_macs"}, {"doc": "Update network definition.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.\n\n:param name: A simple name for the network, to make it easier to\n    refer to.  Must consist only of letters, digits, dashes, and\n    underscores.\n:param ip: Base IP address for the network, e.g. `10.1.0.0`.  The host\n    bits will be zeroed.\n:param netmask: Subnet mask to indicate which parts of an IP address\n    are part of the network address.  For example, `255.255.255.0`.\n:param vlan_tag: Optional VLAN tag: a number between 1 and 0xffe (4094)\n    inclusive, or zero for an untagged network.\n:param description: Detailed description of the network for the benefit\n    of users and administrators.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read network definition.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["name"], "path": "/MAAS/api/1.0/networks/{name}/"}, {"name": "CommissioningScriptHandler", "doc": "Manage a custom commissioning script.\n\nThis functionality is only available to administrators.", "uri": "http://localhost:5240/MAAS/api/1.0/commissioning-scripts/{name}", "actions": [{"doc": "Update a commissioning script.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a commissioning script.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a commissioning script.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["name"], "path": "/MAAS/api/1.0/commissioning-scripts/{name}"}, {"name": "FanNetworksHandler", "doc": "Manage Fan Networks.", "uri": "http://localhost:5240/MAAS/api/1.0/fannetworks/", "actions": [{"doc": "List all fannetworks.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a fannetwork.\n\n:param name: Name of the fannetwork.\n:param overlay: Overlay network\n:param underlay: Underlay network\n:param dhcp: confiugre dhcp server for overlay net\n:param host_reserve: number of IP addresses to reserve for host\n:param bridge: override bridge name\n:param off: put this int he config, but disable it.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/fannetworks/"}, {"name": "BcacheCacheSetsHandler", "doc": "Manage bcache cache sets on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcache-cache-sets/", "actions": [{"doc": "List all bcache cache sets belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Creates a Bcache Cache Set.\n\n:param cache_device: Cache block device.\n:param cache_partition: Cache partition.\n\nSpecifying both a cache_device and a cache_partition is not allowed.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcache-cache-sets/"}, {"name": "FabricHandler", "doc": "Manage fabric.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/{fabric_id}/", "actions": [{"doc": "Update fabric.\n\n:param name: Name of the fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["fabric_id"], "path": "/MAAS/api/1.0/fabrics/{fabric_id}/"}, {"name": "BlockDeviceHandler", "doc": "Manage a block device on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/", "actions": [{"doc": "Unmount the filesystem on block device.\n\nReturns 400 if the block device is not formatted or not currently             mounted.\nReturns 403 when the user doesn't have the ability to unmount the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "unmount", "restful": false, "method": "POST", "name": "unmount"}, {"doc": "Set this block device as the boot disk for the node.\n\nReturns 400 if the block device is a virtual block device.\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready or Allocated.", "op": "set_boot_disk", "restful": false, "method": "POST", "name": "set_boot_disk"}, {"doc": "Unformat block device with filesystem.\n\nReturns 400 if the block device is not formatted, currently mounted,             or part of a filesystem group.\nReturns 403 when the user doesn't have the ability to unformat the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "unformat", "restful": false, "method": "POST", "name": "unformat"}, {"doc": "Add a tag to block device on node.\n\n:param tag: The tag being added.\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready.", "op": "add_tag", "restful": false, "method": "GET", "name": "add_tag"}, {"doc": "Delete block device on node.\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to delete the block device.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Mount the filesystem on block device.\n\n:param mount_point: Path on the filesystem to mount.\n\nReturns 403 when the user doesn't have the ability to mount the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "mount", "restful": false, "method": "POST", "name": "mount"}, {"doc": "Format block device with filesystem.\n\n:param fstype: Type of filesystem.\n:param uuid: UUID of the filesystem.\n\nReturns 403 when the user doesn't have the ability to format the             block device.\nReturns 404 if the node or block device is not found.\nReturns 409 if the node is not Ready or Allocated.", "op": "format", "restful": false, "method": "POST", "name": "format"}, {"doc": "Update block device on node.\n\nFields for physical block device:\n:param name: Name of the block device.\n:param model: Model of the block device.\n:param serial: Serial number of the block device.\n:param id_path: (optional) Only used if model and serial cannot be             provided. This should be a path that is fixed and doesn't change             depending on the boot order or kernel version.\n:param size: Size of the block device.\n:param block_size: Block size of the block device.\n\nFields for virtual block device:\n:param name: Name of the block device.\n:param uuid: UUID of the block device.\n:param size: Size of the block device. (Only allowed for logical             volumes.)\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read block device on node.\n\nReturns 404 if the node or block device is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Remove a tag from block device on node.\n\n:param tag: The tag being removed.\n\nReturns 404 if the node or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the node is not Ready.", "op": "remove_tag", "restful": false, "method": "GET", "name": "remove_tag"}], "params": ["system_id", "device_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/"}, {"name": "NodeGroupInterfacesHandler", "doc": "Manage the collection of all the NodeGroupInterfaces in this MAAS.\n\nA NodeGroupInterface is a network interface attached to a cluster\ncontroller, with its network properties.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/interfaces/", "actions": [{"doc": "List of NodeGroupInterfaces of a NodeGroup.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Create a new NodeGroupInterface for this NodeGroup.\n\n:param name: Name for the interface.  Must be unique within this\n    cluster.  Only letters, digits, dashes, and colons are allowed.\n:param ip: Static IP of the interface.\n:type ip: unicode (IP Address)\n:param interface: Name of the network interface that connects the\n    cluster controller to this network.\n:type interface: unicode\n:param management: The service(s) MAAS should manage on this interface.\n:type management: Vocabulary `NODEGROUPINTERFACE_MANAGEMENT`\n:param subnet_mask: Subnet mask, e.g. 255.0.0.0.\n:type subnet_mask: unicode (IP Address)\n:param broadcast_ip: Broadcast address for this subnet.\n:type broadcast_ip: unicode (IP Address)\n:param router_ip: Address of default gateway.\n:type router_ip: unicode (IP Address)\n:param ip_range_low: Lowest dynamic IP address to assign to clients.\n:type ip_range_low: unicode (IP Address)\n:param ip_range_high: Highest dynamic IP address to assign to clients.\n:type ip_range_high: unicode (IP Address)\n:param static_ip_range_low: Lowest static IP address to assign to\n    clients.\n:type static_ip_range_low: unicode (IP Address)\n:param static_ip_range_high: Highest static IP address to assign to\n    clients.\n:type static_ip_range_high: unicode (IP Address)\n\nReturns 404 if the node group (cluster) is not found.\nReturns 403 if the user does not have permission to access the\ninterface.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": ["uuid"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/interfaces/"}, {"name": "EventsHandler", "doc": "Retrieve filtered node events.\n\nA specific Node's events is identified by specifying one or more\nids, hostnames, or mac addresses as a list.", "uri": "http://localhost:5240/MAAS/api/1.0/events/", "actions": [{"doc": "List Node events, optionally filtered by various criteria via\nURL query parameters.\n\n:param hostname: An optional hostname. Only events relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to get events relating to more than one node.\n:param mac_address: An optional list of MAC addresses.  Only\n    nodes with matching MAC addresses will be returned.\n:param id: An optional list of system ids.  Only nodes with\n    matching system ids will be returned.\n:param zone: An optional name for a physical zone. Only nodes in the\n    zone will be returned.\n:param agent_name: An optional agent name.  Only nodes with\n    matching agent names will be returned.\n:param level: Desired minimum log level of returned events. Returns\n    this level of events and greater. Choose from: DEBUG, INFO, WARNING, CRITICAL, ERROR.\n    The default is INFO.", "op": "query", "restful": false, "method": "GET", "name": "query"}], "params": [], "path": "/MAAS/api/1.0/events/"}, {"name": "BootSourceSelectionsHandler", "doc": "Manage the collection of boot source selections.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/", "actions": [{"doc": "List boot source selections.\n\nGet a listing of a boot source's selections.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new boot source selection.\n\n:param release: The release for which to import resources.\n:param arches: The architecture list for which to import resources.\n:param subarches: The subarchitecture list for which to import\n    resources.\n:param labels: The label lists for which to import resources.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["boot_source_id"], "path": "/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/"}, {"name": "NodeInterfaceHandler", "doc": "Manage a node's interface.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/interfaces/{interface_id}/", "actions": [{"doc": "Delete interface on node.\n\nReturns 404 if the node or interface is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Link interface to a subnet.\n\n:param mode: AUTO, DHCP, STATIC or LINK_UP connection to subnet.\n:param subnet: Subnet linked to interface.\n:param ip_address: IP address for the interface in subnet. Only used\n    when mode is STATIC. If not provided an IP address from subnet\n    will be auto selected.\n:param default_gateway: True sets the gateway IP address for the subnet\n    as the default gateway for the node this interface belongs to.\n    Option can only be used with the AUTO and STATIC modes.\n\nMode definitions:\nAUTO - Assign this interface a static IP address from the provided\nsubnet. The subnet must be a managed subnet. The IP address will\nnot be assigned until the node goes to be deployed.\n\nDHCP - Bring this interface up with DHCP on the given subnet. Only\none subnet can be set to DHCP. If the subnet is managed this\ninterface will pull from the dynamic IP range.\n\nSTATIC - Bring this interface up with a STATIC IP address on the\ngiven subnet. Any number of STATIC links can exist on an interface.\n\nLINK_UP - Bring this interface up only on the given subnet. No IP\naddress will be assigned to this interface. The interface cannot\nhave any current AUTO, DHCP or STATIC links.\n\nReturns 404 if the node or interface is not found.", "op": "link_subnet", "restful": false, "method": "POST", "name": "link_subnet"}, {"doc": "Set the node to use this interface as the default gateway.\n\nIf this interface has more than one subnet with a gateway IP in the\nsame IP address family then specifying the ID of the link on\nthis interface is required.\n\n:param link_id: ID of the link on this interface to select the\n    default gateway IP address from.\n\nReturns 400 if the interface has not AUTO or STATIC links.\nReturns 404 if the node or interface is not found.", "op": "set_default_gateway", "restful": false, "method": "POST", "name": "set_default_gateway"}, {"doc": "Update interface on node.\n\nFields for physical interface:\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Untagged VLAN the interface is connected to.\n\nFields for bond interface:\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Tagged VLAN the interface is connected to.\n:param parents: Parent interfaces that make this bond.\n\nFields for VLAN interface:\n:param tags: Tags for the interface.\n:param vlan: VLAN the interface is connected to.\n:param parent: Parent interface for this VLAN interface.\n\nFollowing are extra parameters that can be set on all interface types:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nFollowing are parameters specific to bonds:\n\n:param bond-mode: The operating mode of the bond.\n    (Default: active-backup).\n:param bond-miimon: The link monitoring freqeuncy in milliseconds.\n    (Default: 100).\n:param bond-downdelay: Specifies the time, in milliseconds, to wait\n    before disabling a slave after a link failure has been detected.\n:param bond-updelay: Specifies the time, in milliseconds, to wait\n    before enabling a slave after a link recovery has been detected.\n:param bond-lacp_rate: Option specifying the rate in which we'll ask\n    our link partner to transmit LACPDU packets in 802.3ad mode.\n    Available options are fast or slow. (Default: slow).\n:param bond-xmit_hash_policy: The transmit hash policy to use for\n    slave selection in balance-xor, 802.3ad, and tlb modes.\n\nSupported bonding modes (bond-mode):\nbalance-rr - Transmit packets in sequential order from the first\navailable slave through the last.  This mode provides load balancing\nand fault tolerance.\n\nactive-backup - Only one slave in the bond is active.  A different\nslave becomes active if, and only if, the active slave fails.  The\nbond's MAC address is externally visible on only one port (network\nadapter) to avoid confusing the switch.\n\nbalance-xor - Transmit based on the selected transmit hash policy.\nThe default policy is a simple [(source MAC address XOR'd with\ndestination MAC address XOR packet type ID) modulo slave count].\n\nbroadcast - Transmits everything on all slave interfaces. This mode\nprovides fault tolerance.\n\n802.3ad - IEEE 802.3ad Dynamic link aggregation.  Creates aggregation\ngroups that share the same speed and duplex settings.  Utilizes all\nslaves in the active aggregator according to the 802.3ad specification.\n\nbalance-tlb - Adaptive transmit load balancing: channel bonding that\ndoes not require any special switch support.\n\nbalance-alb - Adaptive load balancing: includes balance-tlb plus\nreceive load balancing (rlb) for IPV4 traffic, and does not require any\nspecial switch support.  The receive load balancing is achieved by\nARP negotiation.\n\nReturns 404 if the node or interface is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read interface on node.\n\nReturns 404 if the node or interface is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Unlink interface to a subnet.\n\n:param id: ID of the link on the interface to remove.\n\nReturns 404 if the node or interface is not found.", "op": "unlink_subnet", "restful": false, "method": "POST", "name": "unlink_subnet"}], "params": ["system_id", "interface_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/interfaces/{interface_id}/"}, {"name": "VlansHandler", "doc": "Manage VLANs on a fabric.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/{fabric_id}/vlans/", "actions": [{"doc": "List all VLANs belonging to fabric.\n\nReturns 404 if the fabric is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a VLAN.\n\n:param name: Name of the VLAN.\n:param vid: VLAN ID of the VLAN.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["fabric_id"], "path": "/MAAS/api/1.0/fabrics/{fabric_id}/vlans/"}, {"name": "SubnetHandler", "doc": "Manage subnet.", "uri": "http://localhost:5240/MAAS/api/1.0/subnets/{subnet_id}/", "actions": [{"doc": "Returns statistics for the specified subnet, including:\n\nnum_available - the number of available IP addresses\nlargest_available - the largest number of contiguous free IP addresses\nnum_unavailable - the number of unavailable IP addresses\ntotal_addresses - the sum of the available plus unavailable addresses\nusage - the (floating point) usage percentage of this subnet\nusage_string - the (formatted unicode) usage percentage of this subnet\nranges - the specific IP ranges present in ths subnet (if specified)\n\nOptional arguments:\ninclude_ranges: if True, includes detailed information\nabout the usage of this range.\n\nReturns 404 if the subnet is not found.", "op": "statistics", "restful": false, "method": "GET", "name": "statistics"}, {"doc": "Delete subnet.\n\nReturns 404 if the subnet is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Returns a summary of IP addresses assigned to this subnet.\n\nOptional arguments:\nwith_username: (default=True) if False, suppresses the display\nof usernames associated with each address.\nwith_node_summary: (default=True) if False, suppresses the display\nof any node associated with each address.", "op": "ip_addresses", "restful": false, "method": "GET", "name": "ip_addresses"}, {"doc": "Lists IP ranges currently reserved in the subnet.\n\nReturns 404 if the subnet is not found.", "op": "reserved_ip_ranges", "restful": false, "method": "GET", "name": "reserved_ip_ranges"}, {"doc": "Lists IP ranges currently unreserved in the subnet.\n\nReturns 404 if the subnet is not found.", "op": "unreserved_ip_ranges", "restful": false, "method": "GET", "name": "unreserved_ip_ranges"}, {"doc": "Update subnet.\n\n:param name: Name of the subnet.\n:param vlan: VLAN this subnet belongs to.\n:param space: Space this subnet is in.\n:param cidr: The network CIDR for this subnet.\n:param gateway_ip: The gateway IP address for this subnet.\n:param dns_servers: Comma-seperated list of DNS servers for this             subnet.\n\nReturns 404 if the subnet is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read subnet.\n\nReturns 404 if the subnet is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["subnet_id"], "path": "/MAAS/api/1.0/subnets/{subnet_id}/"}, {"name": "PartitionHandler", "doc": "Manage partition on a block device.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partition/{partition_id}", "actions": [{"doc": "Delete partition.\n\nReturns 404 if the node, block device, or partition are not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Mount the filesystem on partition.\n\n:param mount_point: Path on the filesystem to mount.\n\nReturns 403 when the user doesn't have the ability to mount the             partition.\nReturns 404 if the node, block device, or partition is not found.", "op": "mount", "restful": false, "method": "POST", "name": "mount"}, {"doc": "Format a partition.\n\n:param fstype: Type of filesystem.\n:param uuid: The UUID for the filesystem.\n:param label: The label for the filesystem.\n\nReturns 403 when the user doesn't have the ability to format the             partition.\nReturns 404 if the node, block device, or partition is not found.", "op": "format", "restful": false, "method": "POST", "name": "format"}, {"doc": "Read partition.\n\nReturns 404 if the node, block device, or partition are not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Unmount the filesystem on partition.\n\nReturns 400 if the partition is not formatted or not currently             mounted.\nReturns 403 when the user doesn't have the ability to unmount the             partition.\nReturns 404 if the node, block device, or partition is not found.", "op": "unmount", "restful": false, "method": "POST", "name": "unmount"}, {"doc": "Unformat a partition.", "op": "unformat", "restful": false, "method": "POST", "name": "unformat"}], "params": ["system_id", "device_id", "partition_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partition/{partition_id}"}, {"name": "SSHKeyHandler", "doc": "Manage an SSH key.\n\nSSH keys can be retrieved or deleted.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sshkeys/{keyid}/", "actions": [{"doc": "DELETE an SSH key.\n\nReturns 404 if the key does not exist.\nReturns 401 if the key does not belong to the calling user.", "op": "delete", "restful": false, "method": "POST", "name": "delete"}, {"doc": "DELETE an SSH key.\n\nReturns 404 if the key does not exist.\nReturns 401 if the key does not belong to the calling user.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET an SSH key.\n\nReturns 404 if the key does not exist.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["keyid"], "path": "/MAAS/api/1.0/account/prefs/sshkeys/{keyid}/"}, {"name": "AccountHandler", "doc": "Manage the current logged-in user.", "uri": "http://localhost:5240/MAAS/api/1.0/account/", "actions": [{"doc": "Create an authorisation OAuth token and OAuth consumer.\n\n:return: a json dict with three keys: 'token_key',\n    'token_secret' and 'consumer_key' (e.g.\n    {token_key: 's65244576fgqs', token_secret: 'qsdfdhv34',\n    consumer_key: '68543fhj854fg'}).\n:rtype: string (json)", "op": "create_authorisation_token", "restful": false, "method": "POST", "name": "create_authorisation_token"}, {"doc": "Delete an authorisation OAuth token and the related OAuth consumer.\n\n:param token_key: The key of the token to be deleted.\n:type token_key: unicode", "op": "delete_authorisation_token", "restful": false, "method": "POST", "name": "delete_authorisation_token"}], "params": [], "path": "/MAAS/api/1.0/account/"}, {"name": "NodeInterfacesHandler", "doc": "Manage interfaces on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/interfaces/", "actions": [{"doc": "Create a physical interface on node.\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Untagged VLAN the interface is connected to.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.", "op": "create_physical", "restful": false, "method": "POST", "name": "create_physical"}, {"doc": "List all interfaces belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a bond interface on node.\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: VLAN the interface is connected to.\n:param parents: Parent interfaces that make this bond.\n\nFollowing are parameters specific to bonds:\n\n:param bond_mode: The operating mode of the bond.\n    (Default: active-backup).\n:param bond_miimon: The link monitoring freqeuncy in milliseconds.\n    (Default: 100).\n:param bond_downdelay: Specifies the time, in milliseconds, to wait\n    before disabling a slave after a link failure has been detected.\n:param bond_updelay: Specifies the time, in milliseconds, to wait\n    before enabling a slave after a link recovery has been detected.\n:param bond_lacp_rate: Option specifying the rate in which we'll ask\n    our link partner to transmit LACPDU packets in 802.3ad mode.\n    Available options are fast or slow. (Default: slow).\n:param bond_xmit_hash_policy: The transmit hash policy to use for\n    slave selection in balance-xor, 802.3ad, and tlb modes.\n    (Default: layer2)\n\nSupported bonding modes (bond-mode):\nbalance-rr - Transmit packets in sequential order from the first\navailable slave through the last.  This mode provides load balancing\nand fault tolerance.\n\nactive-backup - Only one slave in the bond is active.  A different\nslave becomes active if, and only if, the active slave fails.  The\nbond's MAC address is externally visible on only one port (network\nadapter) to avoid confusing the switch.\n\nbalance-xor - Transmit based on the selected transmit hash policy.\nThe default policy is a simple [(source MAC address XOR'd with\ndestination MAC address XOR packet type ID) modulo slave count].\n\nbroadcast - Transmits everything on all slave interfaces. This mode\nprovides fault tolerance.\n\n802.3ad - IEEE 802.3ad Dynamic link aggregation.  Creates aggregation\ngroups that share the same speed and duplex settings.  Utilizes all\nslaves in the active aggregator according to the 802.3ad specification.\n\nbalance-tlb - Adaptive transmit load balancing: channel bonding that\ndoes not require any special switch support.\n\nbalance-alb - Adaptive load balancing: includes balance-tlb plus\nreceive load balancing (rlb) for IPV4 traffic, and does not require any\nspecial switch support.  The receive load balancing is achieved by\nARP negotiation.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.", "op": "create_bond", "restful": false, "method": "POST", "name": "create_bond"}, {"doc": "Create a VLAN interface on node.\n\n:param tags: Tags for the interface.\n:param vlan: Tagged VLAN the interface is connected to.\n:param parent: Parent interface for this VLAN interface.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.", "op": "create_vlan", "restful": false, "method": "POST", "name": "create_vlan"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/interfaces/"}, {"name": "LicenseKeyHandler", "doc": "Manage a license key.", "uri": "http://localhost:5240/MAAS/api/1.0/license-key/{osystem}/{distro_series}", "actions": [{"doc": "Update license key.\n\n:param osystem: Operating system that the key belongs to.\n:param distro_series: OS release that the key belongs to.\n:param license_key: License key for osystem/distro_series combo.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete license key.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read license key.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["osystem", "distro_series"], "path": "/MAAS/api/1.0/license-key/{osystem}/{distro_series}"}, {"name": "PartitionsHandler", "doc": "Manage partitions on a block device.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partitions/", "actions": [{"doc": "List all partitions on the block device.\n\nReturns 404 if the node or the block device are not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a partition on the block device.\n\n:param size: The size of the partition.\n:param uuid: UUID for the partition. Only used if the partition table\n    type for the block device is GPT.\n:param bootable: If the partition should be marked bootable.\n\nReturns 404 if the node or the block device are not found.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id", "device_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/{device_id}/partitions/"}, {"name": "SpacesHandler", "doc": "Manage spaces.", "uri": "http://localhost:5240/MAAS/api/1.0/spaces/", "actions": [{"doc": "List all spaces.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a space.\n\n:param name: Name of the space.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/spaces/"}, {"name": "SSHKeysHandler", "doc": "Manage the collection of all the SSH keys in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sshkeys/", "actions": [{"doc": "List all keys belonging to the requesting user.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Add a new SSH key to the requesting user's account.\n\nThe request payload should contain the public SSH key data in form\ndata whose name is \"key\".", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/account/prefs/sshkeys/"}, {"name": "NodeGroupHandler", "doc": "Manage a NodeGroup.\n\nNodeGroup is the internal name for a cluster.\n\nThe NodeGroup is identified by its UUID, a random identifier that looks\nsomething like:\n\n    5977f6ab-9160-4352-b4db-d71a99066c4f\n\nEach NodeGroup has its own uuid.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/", "actions": [{"doc": "Obtain various system details for each node specified.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{system_id: {detail_type: xml, ...}, ...}`` map,\nwhere ``detail_type`` is something like \"lldp\" or \"lshw\".\n\n:param system_ids: System ids of nodes for which to get system details.\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nFor security purposes:\n\na) Requests are only fulfilled for the worker assigned to the\n   nodegroup.\nb) Requests for nodes that are not part of the nodegroup are\n   just ignored.\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.", "op": "details", "restful": false, "method": "POST", "name": "details"}, {"doc": "Add the nodes from a Moonshot HP iLO Chassis Manager (MSCM).\n\n**Warning: this API is deprecated in favor of\nprobe_and_enlist_hardware.**\n\n:param host: IP Address for the MSCM.\n:type host: unicode\n:param username: The username for the MSCM.\n:type username: unicode\n:param password: The password for the MSCM.\n:type password: unicode\n:param accept_all: If true, all enlisted nodes will be\n    commissioned.\n:type accept_all: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "probe_and_enlist_mscm", "restful": false, "method": "POST", "name": "probe_and_enlist_mscm"}, {"doc": "Add the nodes from a Cisco UCS Manager.\n\n**Warning: this API is deprecated in favor of\nprobe_and_enlist_hardware.**\n\n:param url: The URL of the UCS Manager API.\n:type url: unicode\n:param username: The username for the API.\n:type username: unicode\n:param password: The password for the API.\n:type password: unicode\n:param accept_all: If true, all enlisted nodes will be\n    commissioned.\n:type accept_all: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "probe_and_enlist_ucsm", "restful": false, "method": "POST", "name": "probe_and_enlist_ucsm"}, {"doc": "Import the pxe files on this cluster controller.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "import_boot_images", "restful": false, "method": "POST", "name": "import_boot_images"}, {"doc": "Get the list of node ids that are part of this group.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "list_nodes", "restful": false, "method": "GET", "name": "list_nodes"}, {"doc": "Add special hardware types.\n\n:param model: The type of hardware. 'seamicro15k', 'virsh', 'vmware',\n    'powerkvm', 'mscm', 'msftocs' and 'ucsm' are supported.\n\n    seamicro15k is the model for the Seamicro 1500 Chassis.\n    virsh is the model for Virtual Machines managed by Virsh.\n    powerkvm is the model for Virtual Machines on Power KVM,\n    managed by Virsh.\n    mscm is the model for the Moonshot Chassis Manager.\n    msftocs is the model for the Microsoft OCS Chassis Manager.\n    ucsm is the model for the Cisco UCS Manager.\n\n:type model: unicode\n\nThe following are optional for all models:\n\n:param accept_all: If true, all enlisted nodes will be\n    commissioned.\n:type accept_all: unicode\n\nThe following are required if you are probing seamicro15k:\n\n:param mac: The MAC of the seamicro15k chassis.\n:type mac: unicode\n:param username: The username for the chassis.\n:type username: unicode\n:param password: The password for the chassis.\n:type password: unicode\n\nThe following are optional if you are probing seamicro15k:\n\n:param power_control: The power_control to use, either ipmi (default)\n    or restapi.\n:type power_control: unicode\n\nThe following are required if you are probing virsh:\n\n:param power_address: The connection string to virsh.\n:type power_address: unicode\n\nThe following are optional if you are probing virsh:\n\n:param power_pass: The password to use, when qemu+ssh is given as a\n    connection string and ssh key authentication is not being used.\n:type power_pass: unicode\n:param prefix_filter: Filter nodes with supplied prefix.\n:type prefix_filter: unicode\n\nThe following are required if you are probing vmware:\n\n:param host: The VMware hostname or IP address\n:type host: unicode\n:param username: The VMware API username\n:type username: unicode\n:param password: The VMware API password\n:type password: unicode\n\n\nThe following are optional if you are probing vmware:\n\n:param protocol: The VMware API protocol (default: https)\n:type protocol: unicode\n:param port: The VMware API port (default: 443)\n:type port: integer\n:param prefix_filter: Filter nodes with supplied prefix.\n:type prefix_filter: unicode\n\nThe following are required if you are probing mscm:\n\n:param host: IP Address for the Moonshot Chassis Manager.\n:type host: unicode\n:param username: The username for the Moonshot Chassis Manager.\n:type username: unicode\n:param password: The password for the Moonshot Chassis Manager.\n:type password: unicode\n\nThe followeing are required if you are probing msftocs:\n\n:param ip: IP Address for the Microsoft OCS Chassis.\n:type ip: unicode\n:param port: Port for the Microsoft OCS Chassis.\n:type port: unicode\n:param username: The username for the Microsoft OCS Chassis.\n:type username: unicode\n:param password: The password for the Microsoft OCS Chassis.\n:type password: unicode\n\nThe followeing are required if you are probing a ucsm:\n\n:param url: The URL of the UCS Manager API.\n:type url: unicode\n:param username: The username for the UCS Manager API.\n:type username: unicode\n:param password: The password for the UCS Manager API.\n:type password: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "probe_and_enlist_hardware", "restful": false, "method": "POST", "name": "probe_and_enlist_hardware"}, {"doc": "Report progress of a download.\n\nCluster controllers can call this to update the region controller on\nfile downloads they need to perform, such as kernels and initrd files.\nThis gives the administrator insight into what downloads are in\nprogress, how well downloads are going, and what failures may have\noccurred.\n\nA file is identified by an arbitrary name, which must be consistent.\nIt could be a URL, or a filesystem path, or even a symbolic name that\nthe cluster controller makes up.  A cluster controller can download\nthe same file many times over, but not simultaneously.\n\nBefore downloading a file, a cluster controller first reports progress\nwithout the `bytes_downloaded` parameter.  It may optionally report\nprogress while downloading, passing the number of bytes downloaded\nso far.  Finally, if the download succeeded, it should report one final\ntime with the full number of bytes downloaded.\n\nIf the download fails, the cluster controller should report progress\nwith an error string (and either the number of bytes that were\nsuccessfully downloaded, or zero).\n\nProgress reports should include the file's size, if known.  The final\nreport after a successful download must include the size.\n\n:param filename: Arbitrary identifier for the file being downloaded.\n:type filename: unicode\n:param size: Optional size of the file, in bytes.  Must be passed at\n    least once, though it can still be passed on subsequent calls.  If\n    file size is not known, pass it at the end when reporting\n    successful completion.  Do not change the size once given.\n:param bytes_downloaded: Number of bytes that have been successfully\n    downloaded.  Cannot exceed `size`, if known.  This parameter must\n    be omitted from the initial progress report before download starts,\n    and must be included for all subsequent progress reports for that\n    download.\n:type bytes_downloaded: int\n:param error: Optional error string.  A download that has submitted an\n    error with its last progress report is considered to have failed.\n:type error: unicode\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have access to the nodegroup.\nReturns 400 if the required parameters were not passed.", "op": "report_download_progress", "restful": false, "method": "POST", "name": "report_download_progress"}, {"doc": "Update a specific cluster.\n\n:param name: The new DNS name for this cluster.\n:type name: unicode\n:param cluster_name: The new name for this cluster.\n:type cluster_name: unicode\n:param status: The new status for this cluster (see\n    vocabulary `NODEGROUP_STATUS`).\n:type status: int\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "GET a node group.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["uuid"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/"}, {"name": "BlockDevicesHandler", "doc": "Manage block devices on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/blockdevices/", "actions": [{"doc": "List all block devices belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a physical block device.\n\n:param name: Name of the block device.\n:param model: Model of the block device.\n:param serial: Serial number of the block device.\n:param id_path: (optional) Only used if model and serial cannot be\n    provided. This should be a path that is fixed and doesn't change\n    depending on the boot order or kernel version.\n:param size: Size of the block device.\n:param block_size: Block size of the block device.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/blockdevices/"}, {"name": "VolumeGroupHandler", "doc": "Manage volume group on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/volume-group/{volume_group_id}/", "actions": [{"doc": "Read volume group on node.\n\n:param name: Name of the volume group.\n:param uuid: UUID of the volume group.\n:param add_block_devices: Block devices to add to the volume group.\n:param remove_block_devices: Block devices to remove from the\n    volume group.\n:param add_partitions: Partitions to add to the volume group.\n:param remove_partitions: Partitions to remove from the volume group.\n\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete volume group on node.\n\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Delete a logical volume in the volume group.\n\n:param id: ID of the logical volume.\n\nReturns 403 if no logical volume with id.\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": "delete_logical_volume", "restful": false, "method": "POST", "name": "delete_logical_volume"}, {"doc": "Read volume group on node.\n\nReturns 404 if the node or volume group is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a logical volume in the volume group.\n\n:param name: Name of the logical volume.\n:param uuid: (optional) UUID of the logical volume.\n:param size: Size of the logical volume.\n\nReturns 404 if the node or volume group is not found.\nReturns 409 if the node is not Ready.", "op": "create_logical_volume", "restful": false, "method": "POST", "name": "create_logical_volume"}], "params": ["system_id", "volume_group_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/volume-group/{volume_group_id}/"}, {"name": "SSLKeyHandler", "doc": "Manage an SSL key.\n\nSSL keys can be retrieved or deleted.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sslkeys/{keyid}/", "actions": [{"doc": "DELETE an SSL key.\n\nReturns 401 if the key does not belong to the requesting user.\nReturns 204 if the key is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET an SSL key.\n\nReturns 404 if the keyid is not found.\nReturns 401 if the key does not belong to the requesting user.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "DELETE an SSL key.\n\nReturns 401 if the key does not belong to the requesting user.\nReturns 204 if the key is successfully deleted.", "op": "delete", "restful": false, "method": "GET", "name": "delete"}], "params": ["keyid"], "path": "/MAAS/api/1.0/account/prefs/sslkeys/{keyid}/"}, {"name": "SubnetsHandler", "doc": "Manage subnets.", "uri": "http://localhost:5240/MAAS/api/1.0/subnets/", "actions": [{"doc": "List all subnets.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a subnet.\n\n:param name: Name of the subnet.\n:param fabric: Fabric for the subnet. Defaults to the fabric the\n    provided VLAN belongs to or defaults to the default fabric.\n:param vlan: VLAN this subnet belongs to. Defaults to the default\n    VLAN for the provided fabric or defaults to the default VLAN in\n    the default fabric.\n:param vid: VID of the VLAN this subnet belongs to. Only used when\n    vlan is not provided. Picks the VLAN with this VID in the provided\n    fabric or the default fabric if one is not given.\n:param space: Space this subnet is in. Defaults to the default space.\n:param cidr: The network CIDR for this subnet.\n:param gateway_ip: The gateway IP address for this subnet.\n:param dns_servers: Comma-seperated list of DNS servers for this             subnet.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/subnets/"}, {"name": "NodeGroupsHandler", "doc": "Manage the collection of all the nodegroups in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/", "actions": [{"doc": "List nodegroups.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Reject nodegroup enlistment(s).\n\n:param uuid: The UUID (or list of UUIDs) of the nodegroup(s) to reject.\n:type name: unicode (or list of unicodes)\n\nThis method is reserved to admin users and returns 403 if the\nuser is not an admin.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "reject", "restful": false, "method": "POST", "name": "reject"}, {"doc": "Import the boot images on all the accepted cluster controllers.", "op": "import_boot_images", "restful": false, "method": "POST", "name": "import_boot_images"}, {"doc": "Accept nodegroup enlistment(s).\n\n:param uuid: The UUID (or list of UUIDs) of the nodegroup(s) to accept.\n:type name: unicode (or list of unicodes)\n\nThis method is reserved to admin users and returns 403 if the\nuser is not an admin.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": "accept", "restful": false, "method": "POST", "name": "accept"}, {"doc": "Query all the cluster controllers for power information.\n\n:return: a list of dicts that describe the power types in this format.", "op": "describe_power_types", "restful": false, "method": "GET", "name": "describe_power_types"}], "params": [], "path": "/MAAS/api/1.0/nodegroups/"}, {"name": "LicenseKeysHandler", "doc": "Manage the license keys.", "uri": "http://localhost:5240/MAAS/api/1.0/license-keys/", "actions": [{"doc": "List license keys.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Define a license key.\n\n:param osystem: Operating system that the key belongs to.\n:param distro_series: OS release that the key belongs to.\n:param license_key: License key for osystem/distro_series combo.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/license-keys/"}, {"name": "VolumeGroupsHandler", "doc": "Manage volume groups on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/volume-groups/", "actions": [{"doc": "List all volume groups belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a volume group belonging to node.\n\n:param name: Name of the volume group.\n:param uuid: (optional) UUID of the volume group.\n:param block_devices: Block devices to add to the volume group.\n:param partitions: Partitions to add to the volume group.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/volume-groups/"}, {"name": "FilesHandler", "doc": "Manage the collection of all the files in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/files/", "actions": [{"doc": "List the files from the file storage.\n\nThe returned files are ordered by file name and the content is\nexcluded.\n\n:param prefix: Optional prefix used to filter out the returned files.\n:type prefix: string", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Get a file from the file storage using its key.\n\n:param key: The exact key of the file you want to get.\n:type key: string\n:return: The file is returned in the response content.", "op": "get_by_key", "restful": false, "method": "GET", "name": "get_by_key"}, {"doc": "Get a named file from the file storage.\n\n:param filename: The exact name of the file you want to get.\n:type filename: string\n:return: The file is returned in the response content.", "op": "get", "restful": false, "method": "GET", "name": "get"}, {"doc": "Add a new file to the file storage.\n\n:param filename: The file name to use in the storage.\n:type filename: string\n:param file: Actual file data with content type\n    application/octet-stream\n\nReturns 400 if any of these conditions apply:\n - The filename is missing from the parameters\n - The file data is missing\n - More than one file is supplied", "op": "add", "restful": false, "method": "POST", "name": "add"}], "params": [], "path": "/MAAS/api/1.0/files/"}, {"name": "SSLKeysHandler", "doc": "Operations on multiple keys.", "uri": "http://localhost:5240/MAAS/api/1.0/account/prefs/sslkeys/", "actions": [{"doc": "List all keys belonging to the requesting user.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Add a new SSL key to the requesting user's account.\n\nThe request payload should contain the SSL key data in form\ndata whose name is \"key\".", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/account/prefs/sslkeys/"}, {"name": "BootResourceHandler", "doc": "Manage a boot resource.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-resources/{id}/", "actions": [{"doc": "Delete boot resource.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a boot resource.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["id"], "path": "/MAAS/api/1.0/boot-resources/{id}/"}, {"name": "NodeGroupInterfaceHandler", "doc": "Manage a NodeGroupInterface.\n\nA NodeGroupInterface is identified by the uuid for its NodeGroup, and\nthe name of the network interface it represents: \"eth0\" for example.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/interfaces/{name}/", "actions": [{"doc": "Update a specific NodeGroupInterface.\n\n:param name: Identifying name for the cluster interface.\n:param ip: Static IP of the interface.\n:type ip: unicode (IP Address)\n:param interface: Network interface.\n:type interface: unicode\n:param management: The service(s) MAAS should manage on this interface.\n:type management: Vocabulary `NODEGROUPINTERFACE_MANAGEMENT`\n:param subnet_mask: Subnet mask, e.g. 255.0.0.0.\n:type subnet_mask: unicode (IP Address)\n:param broadcast_ip: Broadcast address for this subnet.\n:type broadcast_ip: unicode (IP Address)\n:param router_ip: Address of default gateway.\n:type router_ip: unicode (IP Address)\n:param ip_range_low: Lowest dynamic IP address to assign to clients.\n:type ip_range_low: unicode (IP Address)\n:param ip_range_high: Highest dynamic IP address to assign to clients.\n:type ip_range_high: unicode (IP Address)\n:param static_ip_range_low: Lowest static IP address to assign to\n    clients.\n:type static_ip_range_low: unicode (IP Address)\n:param static_ip_range_high: Highest static IP address to assign to\n    clients.\n:type static_ip_range_high: unicode (IP Address)\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have permission to access the\ninterface.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific NodeGroupInterface.\n\nReturns 404 if the nodegroup (cluster) is not found.\nReturns 403 if the user does not have permission to access the\ninterface.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "List of NodeGroupInterfaces of a NodeGroup.\n\nReturns 404 if the nodegroup (cluster) is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["uuid", "name"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/interfaces/{name}/"}, {"name": "NetworksHandler", "doc": "Manage the networks.\n\nThis endpoint is deprecated. Use the new 'subnets' endpoint instead.", "uri": "http://localhost:5240/MAAS/api/1.0/networks/", "actions": [{"doc": "List networks.\n\n:param node: Optionally, nodes which must be attached to any returned\n    networks.  If more than one node is given, the result will be\n    restricted to networks that these nodes have in common.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Define a network.\n\nThis endpoint is no longer available. Use the 'subnets' endpoint\ninstead.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/networks/"}, {"name": "RaidHandler", "doc": "Manage a specific RAID device on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/raid/{raid_id}/", "actions": [{"doc": "Update RAID on node.\n\n:param name: Name of the RAID.\n:param uuid: UUID of the RAID.\n:param add_block_devices: Block devices to add to the RAID.\n:param remove_block_devices: Block devices to remove from the RAID.\n:param add_spare_devices: Spare block devices to add to the RAID.\n:param remove_spare_devices: Spare block devices to remove\n       from the RAID.\n:param add_partitions: Partitions to add to the RAID.\n:param remove_partitions: Partitions to remove from the RAID.\n:param add_spare_partitions: Spare partitions to add to the RAID.\n:param remove_spare_partitions: Spare partitions to remove from the\n       RAID.\n\nReturns 404 if the node or RAID is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete RAID on node.\n\nReturns 404 if the node or RAID is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read RAID device on node.\n\nReturns 404 if the node or RAID is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["system_id", "raid_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/raid/{raid_id}/"}, {"name": "BootSourceHandler", "doc": "Manage a boot source.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/{id}/", "actions": [{"doc": "Update a specific boot source.\n\n:param url: The URL of the BootSource.\n:param keyring_filename: The path to the keyring file for this\n    BootSource.\n:param keyring_filename: The GPG keyring for this BootSource,\n    base64-encoded data.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific boot source.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a boot source.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["id"], "path": "/MAAS/api/1.0/boot-sources/{id}/"}, {"name": "VlanHandler", "doc": "Manage VLAN on a fabric.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/{fabric_id}/vlans/{vlan_id}/", "actions": [{"doc": "Update VLAN.\n\n:param name: Name of the VLAN.\n:param vid: VLAN ID of the VLAN.\n\nReturns 404 if the fabric or VLAN is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete VLAN on fabric.\n\nReturns 404 if the fabric or VLAN is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read VLAN on fabric.\n\nReturns 404 if the fabric or VLAN is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["fabric_id", "vlan_id"], "path": "/MAAS/api/1.0/fabrics/{fabric_id}/vlans/{vlan_id}/"}, {"name": "NodeHandler", "doc": "Manage an individual Node.\n\nThe Node is identified by its system_id.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/", "actions": [{"doc": "Obtain various system details.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{detail_type: xml, ...}`` map, where\n``detail_type`` is something like \"lldp\" or \"lshw\".\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nReturns 404 if the node is not found.", "op": "details", "restful": false, "method": "GET", "name": "details"}, {"doc": "Power up a node.\n\n:param user_data: If present, this blob of user-data to be made\n    available to the nodes through the metadata service.\n:type user_data: base64-encoded unicode\n:param distro_series: If present, this parameter specifies the\n    OS release the node will use.\n:type distro_series: unicode\n:param hwe_kernel: If present, this parameter specified the kernel to\n    be used on the node\n:type hwe_kernel: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nIdeally we'd have MIME multipart and content-transfer-encoding etc.\ndeal with the encapsulation of binary data, but couldn't make it work\nwith the framework in reasonable time so went for a dumb, manual\nencoding instead.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to start the node.\nReturns 503 if the start-up attempted to allocate an IP address,\nand there were no IP addresses available on the relevant cluster\ninterface.", "op": "start", "restful": false, "method": "POST", "name": "start"}, {"doc": "Begin commissioning process for a node.\n\n:param enable_ssh: Whether to enable SSH for the commissioning\n    environment using the user's SSH key(s).\n:type enable_ssh: bool ('0' for False, '1' for True)\n:param block_poweroff: Whether to prevent the power off the node\n    after the commissioning has completed.\n:type block_poweroff: bool ('0' for False, '1' for True)\n:param skip_networking: Whether to skip re-configuring the networking\n    on the node after the commissioning has completed.\n:type skip_networking: bool ('0' for False, '1' for True)\n:param skip_storage: Whether to skip re-configuring the storage\n    on the node after the commissioning has completed.\n:type skip_storage: bool ('0' for False, '1' for True)\n\nA node in the 'ready', 'declared' or 'failed test' state may\ninitiate a commissioning cycle where it is checked out and tested\nin preparation for transitioning to the 'ready' state. If it is\nalready in the 'ready' state this is considered a re-commissioning\nprocess which is useful if commissioning tests were changed after\nit previously commissioned.\n\nReturns 404 if the node is not found.", "op": "commission", "restful": false, "method": "POST", "name": "commission"}, {"doc": "Update a specific Node.\n\n:param hostname: The new hostname for this node.\n:type hostname: unicode\n:param architecture: The new architecture for this node.\n:type architecture: unicode\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this node.\n:type min_hwe_kernel: unicode\n:param power_type: The new power type for this node. If you use the\n    default value, power_parameters will be set to the empty string.\n    Available to admin users.\n    See the `Power types`_ section for a list of the available power\n    types.\n:type power_type: unicode\n:param power_parameters_{param1}: The new value for the 'param1'\n    power parameter.  Note that this is dynamic as the available\n    parameters depend on the selected value of the Node's power_type.\n    For instance, if the power_type is 'ether_wake', the only valid\n    parameter is 'power_address' so one would want to pass 'myaddress'\n    as the value of the 'power_parameters_power_address' parameter.\n    Available to admin users.\n    See the `Power types`_ section for a list of the available power\n    parameters for each power type.\n:type power_parameters_{param1}: unicode\n:param power_parameters_skip_check: Whether or not the new power\n    parameters for this node should be checked against the expected\n    power parameters for the node's power type ('true' or 'false').\n    The default is 'false'.\n:type power_parameters_skip_check: unicode\n:param zone: Name of a valid physical zone in which to place this node\n:type zone: unicode\n:param swap_size: Specifies the size of the swap file, in bytes. Field\n    accept K, M, G and T suffixes for values expressed respectively in\n    kilobytes, megabytes, gigabytes and terabytes.\n:type swap_size: unicode\n:param boot_type: The installation type of the node. 'fastpath': use\n    the default installer. 'di' use the debian installer.\n    Note that using 'di' is now deprecated and will be removed in favor\n    of the default installer in MAAS 1.9.\n:type boot_type: unicode\n\nReturns 404 if the node is node found.\nReturns 403 if the user does not have permission to update the node.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read a specific Node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Release a \"sticky\" IP address from a node's MAC.\n\n:param address: Optional IP address to release. If left unspecified,\n    will release every \"sticky\" IP address associated with the node.\n\nReturns 400 if the specified addresses could not be deallocated\nReturns 404 if the node is not found.\nReturns 409 if the node is in an allocated state.", "op": "release_sticky_ip_address", "restful": false, "method": "POST", "name": "release_sticky_ip_address"}, {"doc": "Mark a node as 'broken'.\n\nIf the node is allocated, release it first.\n\n:param comment: Optional comment for the event log. Will be\n    displayed on the Node as an error description until marked fixed.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to mark the node\nbroken.", "op": "mark_broken", "restful": false, "method": "POST", "name": "mark_broken"}, {"doc": "Release a node.  Opposite of `NodesHandler.acquire`.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to release the node.\nReturns 409 if the node is in a state where it may not be released.", "op": "release", "restful": false, "method": "POST", "name": "release"}, {"doc": "Changes the storage layout on the node.\n\nThis can only be preformed on an allocated node.\n\nNote: This will clear the current storage layout and any extra\nconfiguration and replace it will the new layout.\n\n:param storage_layout: Storage layout for the node. (flat, lvm\n    and bcache)\n\nThe following are optional for all layouts:\n\n:param boot_size: Size of the boot partition.\n:param root_size: Size of the root partition.\n:param root_device: Physical block device to place the root partition.\n\nThe following are optional for LVM:\n\n:param vg_name: Name of created volume group.\n:param lv_name: Name of created logical volume.\n:param lv_size: Size of created logical volume.\n\nThe following are optional for Bcache:\n\n:param cache_device: Physical block device to use as the cache device.\n:param cache_mode: Cache mode for bcache device. (writeback,\n    writethrough, writearound)\n:param cache_size: Size of the cache partition to create on the cache\n    device.\n:param cache_no_part: Don't create a partition on the cache device.\n    Use the entire disk as the cache device.\n\nReturns 400 if the node is currently not allocated.\nReturns 404 if the node could not be found.\nReturns 403 if the user does not have permission to set the storage\nlayout.", "op": "set_storage_layout", "restful": false, "method": "POST", "name": "set_storage_layout"}, {"doc": "Obtain power parameters.\n\nThis method is reserved for admin users and returns a 403 if the\nuser is not one.\n\nThis returns the power parameters, if any, configured for a\nnode. For some types of power control this will include private\ninformation such as passwords and secret keys.\n\nReturns 404 if the node is not found.", "op": "power_parameters", "restful": false, "method": "GET", "name": "power_parameters"}, {"doc": "Mark a broken node as fixed and set its status as 'ready'.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to mark the node\nfixed.", "op": "mark_fixed", "restful": false, "method": "POST", "name": "mark_fixed"}, {"doc": "Query the power state of a node.\n\nSend a request to the node's power controller which asks it about\nthe node's state.  The reply to this could be delayed by up to\n30 seconds while waiting for the power controller to respond.\nUse this method sparingly as it ties up an appserver thread\nwhile waiting.\n\n:param system_id: The node to query.\n:return: a dict whose key is \"state\" with a value of one of\n    'on' or 'off'.\n\nReturns 400 if the node is not installable.\nReturns 404 if the node is not found.\nReturns 503 (with explanatory text) if the power state could not\nbe queried.", "op": "query_power_state", "restful": false, "method": "GET", "name": "query_power_state"}, {"doc": "Delete a specific Node.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to delete the node.\nReturns 204 if the node is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Clear any set default gateways on the node.\n\nThis will clear both IPv4 and IPv6 gateways on the node. This will\ntransition the logic of identifing the best gateway to MAAS. This logic\nis determined based the following criteria:\n\n1. Managed subnets over unmanaged subnets.\n2. Bond interfaces over physical interfaces.\n3. Node's boot interface over all other interfaces except bonds.\n4. Physical interfaces over VLAN interfaces.\n5. Sticky IP links over user reserved IP links.\n6. User reserved IP links over auto IP links.\n\nIf the default gateways need to be specific for this node you can set\nwhich interface and subnet's gateway to use when this node is deployed\nwith the `node-interfaces set-default-gateway` API.", "op": "clear_default_gateways", "restful": false, "method": "POST", "name": "clear_default_gateways"}, {"doc": "Assign a \"sticky\" IP address to a Node's MAC.\n\n:param mac_address: Optional MAC address on the node on which to\n    assign the sticky IP address.  If not passed, defaults to the\n    PXE MAC for the node.\n:param requested_address: Optional IP address to claim.  Must be in\n    the range defined on a cluster interface to which the context\n    MAC is related, or 403 Forbidden is returned.  If the requested\n    address is unavailable for use, 404 Not Found is returned.\n\nA sticky IP is one which stays with the node until the IP is\ndisassociated with the node, or the node is deleted.  It allows\nan admin to give a node a stable IP, since normally an automatic\nIP is allocated to a node only during the time a user has\nacquired and started a node.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is in an allocated state.\nReturns 400 if the mac_address is not found on the node.\nReturns 503 if there are not enough IPs left on the cluster interface\nto which the mac_address is linked.", "op": "claim_sticky_ip_address", "restful": false, "method": "POST", "name": "claim_sticky_ip_address"}, {"doc": "Abort a node's current operation.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nThis currently only supports aborting of the 'Disk Erasing' operation.\n\nReturns 404 if the node could not be found.\nReturns 403 if the user does not have permission to abort the\ncurrent operation.", "op": "abort_operation", "restful": false, "method": "POST", "name": "abort_operation"}, {"doc": "Shut down a node.\n\n:param stop_mode: An optional power off mode. If 'soft',\n    perform a soft power down if the node's power type supports\n    it, otherwise perform a hard power off. For all values other\n    than 'soft', and by default, perform a hard power off. A\n    soft power off generally asks the OS to shutdown the system\n    gracefully before powering off, while a hard power off\n    occurs immediately without any warning to the OS.\n:type stop_mode: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to stop the node.", "op": "stop", "restful": false, "method": "POST", "name": "stop"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/"}, {"name": "BootSourcesHandler", "doc": "Manage the collection of boot sources.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/", "actions": [{"doc": "List boot sources.\n\nGet a listing of boot sources.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new boot source.\n\n:param url: The URL of the BootSource.\n:param keyring_filename: The path to the keyring file for\n    this BootSource.\n:param keyring_data: The GPG keyring for this BootSource,\n    base64-encoded.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/boot-sources/"}, {"name": "RaidsHandler", "doc": "Manage all RAID devices on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/raids/", "actions": [{"doc": "List all RAID devices belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Creates a RAID\n\n:param name: Name of the RAID.\n:param uuid: UUID of the RAID.\n:param level: RAID level.\n:param block_devices: Block devices to add to the RAID.\n:param spare_devices: Spare block devices to add to the RAID.\n:param partitions: Partitions to add to the RAID.\n:param spare_partitions: Spare partitions to add to the RAID.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/raids/"}, {"name": "BootImagesHandler", "doc": "Manage the collection of boot images.", "uri": "http://localhost:5240/MAAS/api/1.0/nodegroups/{uuid}/boot-images/", "actions": [{"doc": "List boot images.\n\nGet a listing of a cluster's boot images.\n\n:param uuid: The UUID of the cluster for which the images\n    should be listed.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["uuid"], "path": "/MAAS/api/1.0/nodegroups/{uuid}/boot-images/"}, {"name": "UsersHandler", "doc": "Manage the user accounts of this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/users/", "actions": [{"doc": "List users.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a MAAS user account.\n\nThis is not safe: the password is sent in plaintext.  Avoid it for\nproduction, unless you are confident that you can prevent eavesdroppers\nfrom observing the request.\n\n:param username: Identifier-style username for the new user.\n:type username: unicode\n:param email: Email address for the new user.\n:type email: unicode\n:param password: Password for the new user.\n:type password: unicode\n:param is_superuser: Whether the new user is to be an administrator.\n:type is_superuser: bool ('0' for False, '1' for True)\n\nReturns 400 if any mandatory parameters are missing.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/users/"}, {"name": "BootSourceSelectionHandler", "doc": "Manage a boot source selection.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/{id}/", "actions": [{"doc": "Update a specific boot source selection.\n\n:param release: The release for which to import resources.\n:param arches: The list of architectures for which to import resources.\n:param subarches: The list of subarchitectures for which to import\n    resources.\n:param labels: The list of labels for which to import resources.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific boot source.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a boot source selection.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["boot_source_id", "id"], "path": "/MAAS/api/1.0/boot-sources/{boot_source_id}/selections/{id}/"}, {"name": "NodesHandler", "doc": "Manage the collection of all the nodes in the MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/", "actions": [{"doc": "Release multiple nodes.\n\nThis places the nodes back into the pool, ready to be reallocated.\n\n:param nodes: system_ids of the nodes which are to be released.\n   (An empty list is acceptable).\n:param comment: Optional comment for the event log.\n:type comment: unicode\n:return: The system_ids of any nodes that have their status\n    changed by this call. Thus, nodes that were already released\n    are excluded from the result.\n\nReturns 400 if any of the nodes cannot be found.\nReturns 403 if the user does not have permission to release any of\nthe nodes.\nReturns a 409 if any of the nodes could not be released due to their\ncurrent state.", "op": "release", "restful": false, "method": "POST", "name": "release"}, {"doc": "Accept declared nodes into the MAAS.\n\nNodes can be enlisted in the MAAS anonymously or by non-admin users,\nas opposed to by an admin.  These nodes are held in the New\nstate; a MAAS admin must first verify the authenticity of these\nenlistments, and accept them.\n\nEnlistments can be accepted en masse, by passing multiple nodes to\nthis call.  Accepting an already accepted node is not an error, but\naccepting one that is already allocated, broken, etc. is.\n\n:param nodes: system_ids of the nodes whose enlistment is to be\n    accepted.  (An empty list is acceptable).\n:return: The system_ids of any nodes that have their status changed\n    by this call.  Thus, nodes that were already accepted are\n    excluded from the result.\n\nReturns 400 if any of the nodes do not exist.\nReturns 403 if the user is not an admin.", "op": "accept", "restful": false, "method": "POST", "name": "accept"}, {"doc": "Check all commissioning nodes to see if they are taking too long.\n\nAnything that has been commissioning for longer than\nsettings.COMMISSIONING_TIMEOUT is moved into the\nFAILED_COMMISSIONING status.", "op": "check_commissioning", "restful": false, "method": "POST", "name": "check_commissioning"}, {"doc": "List all nodes.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Retrieve power parameters for multiple nodes.\n\n:param id: An optional list of system ids.  Only nodes with\n    matching system ids will be returned.\n:type id: iterable\n\n:return: A dictionary of power parameters, keyed by node system_id.\n\nRaises 403 if the user is not an admin.", "op": "power_parameters", "restful": false, "method": "GET", "name": "power_parameters"}, {"doc": "Accept all declared nodes into the MAAS.\n\nNodes can be enlisted in the MAAS anonymously or by non-admin users,\nas opposed to by an admin.  These nodes are held in the New\nstate; a MAAS admin must first verify the authenticity of these\nenlistments, and accept them.\n\n:return: Representations of any nodes that have their status changed\n    by this call.  Thus, nodes that were already accepted are excluded\n    from the result.", "op": "accept_all", "restful": false, "method": "POST", "name": "accept_all"}, {"doc": "Acquire an available node for deployment.\n\nConstraints parameters can be used to acquire a node that possesses\ncertain characteristics.  All the constraints are optional and when\nmultiple constraints are provided, they are combined using 'AND'\nsemantics.\n\n:param name: Hostname of the returned node.\n:type name: unicode\n:param arch: Architecture of the returned node (e.g. 'i386/generic',\n    'amd64', 'armhf/highbank', etc.).\n:type arch: unicode\n:param cpu_count: The minium number of CPUs the returned node must\n    have.\n:type cpu_count: int\n:param mem: The minimum amount of memory (expressed in MB) the\n     returned node must have.\n:type mem: float\n:param tags: List of tags the returned node must have.\n:type tags: list of unicodes\n:param not_tags: List of tags the acquired node must not have.\n:type tags: List of unicodes.\n:param connected_to: List of routers' MAC addresses the returned\n    node must be connected to.\n:type connected_to: unicode or list of unicodes\n:param networks: List of networks (defined in MAAS) to which the node\n    must be attached.  A network can be identified by the name\n    assigned to it in MAAS; or by an `ip:` prefix followed by any IP\n    address that falls within the network; or a `vlan:` prefix\n    followed by a numeric VLAN tag, e.g. `vlan:23` for VLAN number 23.\n    Valid VLAN tags must be in the range of 1 to 4095 inclusive.\n:type networks: list of unicodes\n:param not_networks: List of networks (defined in MAAS) to which the\n    node must not be attached.  The returned noded won't be attached to\n    any of the specified networks.  A network can be identified by the\n    name assigned to it in MAAS; or by an `ip:` prefix followed by any\n    IP address that falls within the network; or a `vlan:` prefix\n    followed by a numeric VLAN tag, e.g. `vlan:23` for VLAN number 23.\n    Valid VLAN tags must be in the range of 1 to 4095 inclusive.\n:type not_networks: list of unicodes\n:param not_connected_to: List of routers' MAC Addresses the returned\n    node must not be connected to.\n:type connected_to: list of unicodes\n:param zone: An optional name for a physical zone the acquired\n    node should be located in.\n:type zone: unicode\n:type not_in_zone: Optional list of physical zones from which the\n    node should not be acquired.\n:type not_in_zone: List of unicodes.\n:param agent_name: An optional agent name to attach to the\n    acquired node.\n:type agent_name: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 409 if a suitable node matching the constraints could not be\nfound.", "op": "acquire", "restful": false, "method": "POST", "name": "acquire"}, {"doc": "Retrieve deployment status for multiple nodes.\n\n:param nodes: Mandatory list of system IDs for nodes whose status\n    you wish to check.\n\nReturns 400 if mandatory parameters are missing.\nReturns 403 if the user has no permission to view any of the nodes.", "op": "deployment_status", "restful": false, "method": "GET", "name": "deployment_status"}, {"doc": "Assign multiple nodes to a physical zone at once.\n\n:param zone: Zone name.  If omitted, the zone is \"none\" and the nodes\n    will be taken out of their physical zones.\n:param nodes: system_ids of the nodes whose zones are to be set.\n   (An empty list is acceptable).\n\nRaises 403 if the user is not an admin.", "op": "set_zone", "restful": false, "method": "POST", "name": "set_zone"}, {"doc": "Fetch Nodes that were allocated to the User/oauth token.", "op": "list_allocated", "restful": false, "method": "GET", "name": "list_allocated"}, {"doc": "Create a new Node.\n\nAdding a server to a MAAS puts it on a path that will wipe its disks\nand re-install its operating system, in the event that it PXE boots.\nIn anonymous enlistment (and when the enlistment is done by a\nnon-admin), the node is held in the \"New\" state for approval by a MAAS\nadmin.\n\nThe minimum data required is:\narchitecture=<arch string> (e.g. \"i386/generic\")\nmac_addresses=<value> (e.g. \"aa:bb:cc:dd:ee:ff\")\nautodetect_nodegroup=True\n\n:param architecture: A string containing the architecture type of\n    the node. (For example, \"i386\", or \"amd64\".) To determine the\n    supported architectures, use the boot-resources endpoint.\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this node.\n:param subarchitecture: A string containing the subarchitecture type\n    of the node. (For example, \"generic\" or \"hwe-t\".) To determine\n    the supported subarchitectures, use the boot-resources endpoint.\n:param mac_addresses: One or more MAC addresses for the node. To\n    specify more than one MAC address, the parameter must be specified\n    twice. (such as \"nodes new mac_addresses=01:02:03:04:05:06\n    mac_addresses=02:03:04:05:06:07\")\n:param hostname: A hostname. If not given, one will be generated.\n:param power_type: A power management type, if applicable (e.g.\n    \"virsh\", \"ipmi\").\n:param autodetect_nodegroup: (boolean) Whether or not to attempt\n    nodegroup detection for this node. The nodegroup is determined\n    based on the requestor's IP address range. (if the API request\n    comes from an IP range within a known nodegroup, that nodegroup\n    will be used.)\n:param nodegroup: The id of the nodegroup this node belongs to.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/nodes/"}, {"name": "FanNetworkHandler", "doc": "Manage Fan Network.", "uri": "http://localhost:5240/MAAS/api/1.0/fannetworks/{fannetwork_id}/", "actions": [{"doc": "Update fannetwork.\n\n:param name: Name of the fannetwork.\n:param overlay: Overlay network\n:param underlay: Underlay network\n:param dhcp: confiugre dhcp server for overlay net\n:param host_reserve: number of IP addresses to reserve for host\n:param bridge: override bridge name\n:param off: put this int he config, but disable it.\n\nReturns 404 if the fannetwork is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete fannetwork.\n\nReturns 404 if the fannetwork is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read fannetwork.\n\nReturns 404 if the fannetwork is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["fannetwork_id"], "path": "/MAAS/api/1.0/fannetworks/{fannetwork_id}/"}, {"name": "SpaceHandler", "doc": "Manage space.", "uri": "http://localhost:5240/MAAS/api/1.0/spaces/{space_id}/", "actions": [{"doc": "Update space.\n\n:param name: Name of the space.\n\nReturns 404 if the space is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete subnet.\n\nReturns 404 if the space is not found.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read space.\n\nReturns 404 if the space is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["space_id"], "path": "/MAAS/api/1.0/spaces/{space_id}/"}, {"name": "NodeResultsHandler", "doc": "Read the collection of NodeResult in the MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/installation-results/", "actions": [{"doc": "List NodeResult visible to the user, optionally filtered.\n\n:param system_id: An optional list of system ids.  Only the\n    results related to the nodes with these system ids\n    will be returned.\n:type system_id: iterable\n:param name: An optional list of names.  Only the results\n    with the specified names will be returned.\n:type name: iterable\n:param result_type: An optional result_type.  Only the results\n    with the specified result_type will be returned.\n:type name: iterable", "op": "list", "restful": false, "method": "GET", "name": "list"}], "params": [], "path": "/MAAS/api/1.0/installation-results/"}, {"name": "BcacheHandler", "doc": "Manage bcache device on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcache/{bcache_id}/", "actions": [{"doc": "Delete bcache on node.\n\n:param name: Name of the Bcache.\n:param uuid: UUID of the Bcache.\n:param cache_set: Cache set to replace current one.\n:param backing_device: Backing block device to replace current one.\n:param backing_partition: Backing partition to replace current one.\n:param cache_mode: Cache mode (writeback, writethrough, writearound).\n\nSpecifying both a device and a partition for a given role (cache or\nbacking) is not allowed.\n\nReturns 404 if the node or the bcache is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete bcache on node.\n\nReturns 404 if the node or bcache is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read bcache device on node.\n\nReturns 404 if the node or bcache is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["system_id", "bcache_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcache/{bcache_id}/"}, {"name": "BootResourcesHandler", "doc": "Manage the boot resources.", "uri": "http://localhost:5240/MAAS/api/1.0/boot-resources/", "actions": [{"doc": "List all boot resources.\n\n:param type: Type of boot resources to list. Default: all", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Uploads a new boot resource.\n\n:param name: Name of the boot resource.\n:param title: Title for the boot resource.\n:param architecture: Architecture the boot resource supports.\n:param filetype: Filetype for uploaded content. (Default: tgz)\n:param content: Image content. Note: this is not a normal parameter,\n    but a file upload.", "op": null, "restful": true, "method": "POST", "name": "create"}, {"doc": "Import the boot resources.", "op": "import", "restful": false, "method": "POST", "name": "import"}], "params": [], "path": "/MAAS/api/1.0/boot-resources/"}, {"name": "ZoneHandler", "doc": "Manage a physical zone.\n\nAny node is in a physical zone, or \"zone\" for short.  The meaning of a\nphysical zone is up to you: it could identify e.g. a server rack, a\nnetwork, or a data centre.  Users can then allocate nodes from specific\nphysical zones, to suit their redundancy or performance requirements.\n\nThis functionality is only available to administrators.  Other users can\nview physical zones, but not modify them.", "uri": "http://localhost:5240/MAAS/api/1.0/zones/{name}/", "actions": [{"doc": "PUT request.  Update zone.\n\nReturns 404 if the zone is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "DELETE request.  Delete zone.\n\nReturns 404 if the zone is not found.\nReturns 204 if the zone is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET request.  Return zone.\n\nReturns 404 if the zone is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["name"], "path": "/MAAS/api/1.0/zones/{name}/"}, {"name": "TagsHandler", "doc": "Manage the collection of all the Tags in this MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/tags/", "actions": [{"doc": "List Tags.\n\nGet a listing of all tags that are currently defined.", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Create a new Tag.\n\n:param name: The name of the Tag to be created. This should be a short\n    name, and will be used in the URL of the tag.\n:param comment: A long form description of what the tag is meant for.\n    It is meant as a human readable description of the tag.\n:param definition: An XPATH query that will be evaluated against the\n    hardware_details stored for all nodes (output of `lshw -xml`).\n:param kernel_opts: Can be None. If set, nodes associated with this tag\n    will add this string to their kernel options when booting. The\n    value overrides the global 'kernel_opts' setting. If more than one\n    tag is associated with a node, the one with the lowest alphabetical\n    name will be picked (eg 01-my-tag will be taken over 99-tag-name).\n\nReturns 401 if the user is not an admin.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/tags/"}, {"name": "DeviceHandler", "doc": "Manage an individual device.\n\nThe device is identified by its system_id.", "uri": "http://localhost:5240/MAAS/api/1.0/devices/{system_id}/", "actions": [{"doc": "Update a specific device.\n\n:param hostname: The new hostname for this device.\n:param parent: Optional system_id to indicate this device's parent.\n    If the parent is already set and this parameter is omitted,\n    the parent will be unchanged.\n:type hostname: unicode\n\nReturns 404 if the device is not found.\nReturns 403 if the user does not have permission to update the device.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Delete a specific Device.\n\nReturns 404 if the device is not found.\nReturns 403 if the user does not have permission to delete the device.\nReturns 204 if the device is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Read a specific device.\n\nReturns 404 if the device is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Release a \"sticky\" IP address from a device's MAC.\n\n:param address: Optional IP address to release. If left unspecified,\n    will release every \"sticky\" IP address associated with the device.\n\nReturns 400 if the specified addresses could not be deallocated\nReturns 404 if the device is not found.", "op": "release_sticky_ip_address", "restful": false, "method": "POST", "name": "release_sticky_ip_address"}, {"doc": "Assign a \"sticky\" IP address to a device's MAC.\n\n:param mac_address: Optional MAC address on the device on which to\n    assign the sticky IP address.  If not passed, defaults to the\n    primary MAC for the device.\n:param requested_address: Optional IP address to claim.  If this\n    isn't passed, this method will draw an IP address from the static\n    range of the cluster interface this MAC is related to.\n    If passed, this method lets you associate any IP address\n    with a MAC address if the MAC isn't related to a cluster interface.\n\nReturns 404 if the device is not found.\nReturns 400 if the mac_address is not found on the device.\nReturns 503 if there are not enough IPs left on the cluster interface\nto which the mac_address is linked.\nReturns 503 if the requested_address falls in a dynamic range.\nReturns 503 if the requested_address falls in a dynamic range.\nReturns 503 if the requested_address is already allocated.", "op": "claim_sticky_ip_address", "restful": false, "method": "POST", "name": "claim_sticky_ip_address"}], "params": ["system_id"], "path": "/MAAS/api/1.0/devices/{system_id}/"}, {"name": "BcachesHandler", "doc": "Manage bcache devices on a node.", "uri": "http://localhost:5240/MAAS/api/1.0/nodes/{system_id}/bcaches/", "actions": [{"doc": "List all bcache devices belonging to node.\n\nReturns 404 if the node is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Creates a Bcache.\n\n:param name: Name of the Bcache.\n:param uuid: UUID of the Bcache.\n:param cache_set: Cache set.\n:param backing_device: Backing block device.\n:param backing_partition: Backing partition.\n:param cache_mode: Cache mode (WRITEBACK, WRITETHROUGH, WRITEAROUND).\n\nSpecifying both a device and a partition for a given role (cache or\nbacking) is not allowed.\n\nReturns 404 if the node is not found.\nReturns 409 if the node is not Ready.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": ["system_id"], "path": "/MAAS/api/1.0/nodes/{system_id}/bcaches/"}, {"name": "FileHandler", "doc": "Manage a FileStorage object.\n\nThe file is identified by its filename and owner.", "uri": "http://localhost:5240/MAAS/api/1.0/files/{filename}/", "actions": [{"doc": "Delete a FileStorage object.", "op": "delete", "restful": false, "method": "POST", "name": "delete"}, {"doc": "Delete a FileStorage object.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "GET a FileStorage object as a json object.\n\nThe 'content' of the file is base64-encoded.", "op": null, "restful": true, "method": "GET", "name": "read"}], "params": ["filename"], "path": "/MAAS/api/1.0/files/{filename}/"}, {"name": "CommissioningScriptsHandler", "doc": "Manage custom commissioning scripts.\n\nThis functionality is only available to administrators.", "uri": "http://localhost:5240/MAAS/api/1.0/commissioning-scripts/", "actions": [{"doc": "List commissioning scripts.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new commissioning script.\n\nEach commissioning script is identified by a unique name.\n\nBy convention the name should consist of a two-digit number, a dash,\nand a brief descriptive identifier consisting only of ASCII\ncharacters.  You don't need to follow this convention, but not doing\nso opens you up to risks w.r.t. encoding and ordering.  The name must\nnot contain any whitespace, quotes, or apostrophes.\n\nA commissioning node will run each of the scripts in lexicographical\norder.  There are no promises about how non-ASCII characters are\nsorted, or even how upper-case letters are sorted relative to\nlower-case letters.  So where ordering matters, use unique numbers.\n\nScripts built into MAAS will have names starting with \"00-maas\" or\n\"99-maas\" to ensure that they run first or last, respectively.\n\nUsually a commissioning script will be just that, a script.  Ideally a\nscript should be ASCII text to avoid any confusion over encoding.  But\nin some cases a commissioning script might consist of a binary tool\nprovided by a hardware vendor.  Either way, the script gets passed to\nthe commissioning node in the exact form in which it was uploaded.\n\n:param name: Unique identifying name for the script.  Names should\n    follow the pattern of \"25-burn-in-hard-disk\" (all ASCII, and with\n    numbers greater than zero, and generally no \"weird\" characters).\n:param content: A script file, to be uploaded in binary form.  Note:\n    this is not a normal parameter, but a file upload.  Its filename\n    is ignored; MAAS will know it by the name you pass to the request.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/commissioning-scripts/"}, {"name": "ZonesHandler", "doc": "Manage physical zones.", "uri": "http://localhost:5240/MAAS/api/1.0/zones/", "actions": [{"doc": "List zones.\n\nGet a listing of all the physical zones.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a new physical zone.\n\n:param name: Identifier-style name for the new zone.\n:type name: unicode\n:param description: Free-form description of the new zone.\n:type description: unicode", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/zones/"}, {"name": "FabricsHandler", "doc": "Manage fabrics.", "uri": "http://localhost:5240/MAAS/api/1.0/fabrics/", "actions": [{"doc": "List all fabrics.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Create a fabric.\n\n:param name: Name of the fabric.", "op": null, "restful": true, "method": "POST", "name": "create"}], "params": [], "path": "/MAAS/api/1.0/fabrics/"}, {"name": "DevicesHandler", "doc": "Manage the collection of all the devices in the MAAS.", "uri": "http://localhost:5240/MAAS/api/1.0/devices/", "actions": [{"doc": "List devices visible to the user, optionally filtered by criteria.\n\n:param hostname: An optional list of hostnames.  Only devices with\n    matching hostnames will be returned.\n:type hostname: iterable\n:param mac_address: An optional list of MAC addresses.  Only\n    devices with matching MAC addresses will be returned.\n:type mac_address: iterable\n:param id: An optional list of system ids.  Only devices with\n    matching system ids will be returned.\n:type id: iterable", "op": "list", "restful": false, "method": "GET", "name": "list"}, {"doc": "Create a new device.\n\n:param mac_addresses: One or more MAC addresses for the device.\n:param hostname: A hostname. If not given, one will be generated.\n:param parent: The system id of the parent.  Optional.", "op": "new", "restful": false, "method": "POST", "name": "new"}], "params": [], "path": "/MAAS/api/1.0/devices/"}, {"name": "TagHandler", "doc": "Manage a Tag.\n\nTags are properties that can be associated with a Node and serve as\ncriteria for selecting and allocating nodes.\n\nA Tag is identified by its name.", "uri": "http://localhost:5240/MAAS/api/1.0/tags/{name}/", "actions": [{"doc": "Delete a specific Tag.\n\nReturns 404 if the tag is not found.\nReturns 204 if the tag is successfully deleted.", "op": null, "restful": true, "method": "DELETE", "name": "delete"}, {"doc": "Get the list of nodes that have this tag.\n\nReturns 404 if the tag is not found.", "op": "nodes", "restful": false, "method": "GET", "name": "nodes"}, {"doc": "Manually trigger a rebuild the tag <=> node mapping.\n\nThis is considered a maintenance operation, which should normally not\nbe necessary. Adding nodes or updating a tag's definition should\nautomatically trigger the appropriate changes.\n\nReturns 404 if the tag is not found.", "op": "rebuild", "restful": false, "method": "POST", "name": "rebuild"}, {"doc": "Update a specific Tag.\n\n:param name: The name of the Tag to be created. This should be a short\n    name, and will be used in the URL of the tag.\n:param comment: A long form description of what the tag is meant for.\n    It is meant as a human readable description of the tag.\n:param definition: An XPATH query that will be evaluated against the\n    hardware_details stored for all nodes (output of `lshw -xml`).\n\nReturns 404 if the tag is not found.", "op": null, "restful": true, "method": "PUT", "name": "update"}, {"doc": "Read a specific Tag.\n\nReturns 404 if the tag is not found.", "op": null, "restful": true, "method": "GET", "name": "read"}, {"doc": "Add or remove nodes being associated with this tag.\n\n:param add: system_ids of nodes to add to this tag.\n:param remove: system_ids of nodes to remove from this tag.\n:param definition: (optional) If supplied, the definition will be\n    validated against the current definition of the tag. If the value\n    does not match, then the update will be dropped (assuming this was\n    just a case of a worker being out-of-date)\n:param nodegroup: A uuid of a nodegroup being processed. This value is\n    optional. If not supplied, the requester must be a superuser. If\n    supplied, then the requester must be the worker associated with\n    that nodegroup, and only nodes that are part of that nodegroup can\n    be updated.\n\nReturns 404 if the tag is not found.\nReturns 401 if the user does not have permission to update the nodes.\nReturns 409 if 'definition' doesn't match the current definition.", "op": "update_nodes", "restful": false, "method": "POST", "name": "update_nodes"}], "params": ["name"], "path": "/MAAS/api/1.0/tags/{name}/"}]}